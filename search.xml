<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS学习笔记｜MDN-CSS选择器</title>
    <url>/2022/MDN_CSS_Selectors.html</url>
    <content><![CDATA[<p>记录在MDN学习CSS中的一些个人笔记。</p>
<span id="more"></span>
<h2 id="选择器种类">选择器种类</h2>
<h3 id="通配选择器">通配选择器</h3>
<p>或叫全局选择器。选中所有元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="标签、类、ID选择器">标签、类、ID选择器</h3>
<p>标签选择器。选择所有的 <code>h1</code> 元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>类选择器。选择类名有 <code>box</code> 的元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>ID选择器。选择 ID 为 <code>aid</code> 的元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#aid</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>标签+类/ID，选择含有指定类/ID的某标签元素。</p>
<p>选择类名为 <code>aclass</code>  的 <code>h1</code> 元素。</p>
<p>选择 ID 名为 <code>aid</code>  的 <code>h1</code> 元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.aclass</span> &#123; &#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-id">#aid</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<h3 id="标签属性选择器">标签属性选择器</h3>
<p>存在title属性的 <code>a</code> 标签元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[title]</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>存在href属性且为 <code>xxx</code> 的 <code>a</code> 标签元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;xxx&quot;</span>]</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>更多</strong></p>
<ul>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors">MDN-属性选择器</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors/Attribute_selectors">MDN-属性选择器</a></p>
</li>
</ul>
<h3 id="伪类与伪元素选择器">伪类与伪元素选择器</h3>
<p>伪类选择器， <code>:hover</code> 当鼠标悬浮与 a 上时样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>伪元素选择器，选择元素的某一个部分。  <code>::first-line</code> 选择元素的第一行。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>伪元素之 <code>::before</code> <code>::after</code></p>
<p>常与 <code>content</code> 用于在选中的元素前后插入内容。</p>
<p>但通常不插入文字，如果插入文字为何不直接写在元素自身呢？且对于一些屏幕阅读器来说是不可见的，因此一般用于插入图标/符号。或者设置空字符串，利用 CSS 绘制外观。如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;✅&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;❤️这是after&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>效果</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2022/01/%E4%BC%AA%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8beforeafter%E7%A4%BA%E4%BE%8B.png" alt="伪元素选择器beforeafter示例"></p>
<p><strong>更多</strong></p>
<ul>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors/Pseudo-classes_and_pseudo-elements">MDN-伪类和伪元素</a></p>
</li>
<li>
<p><a href="https://www.zhangxinxu.com/wordpress/2011/06/css3%E9%80%89%E6%8B%A9%E5%99%A8nth-child%E5%92%8Cnth-of-type%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B7%AE%E5%BC%82/">CSS3选择器:nth-child和:nth-of-type之间的差异</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">伪类选择器</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements">伪元素选择器</a></p>
</li>
</ul>
<h3 id="关系选择器-运算符">关系选择器/运算符</h3>
<p>组合起来，作为更复杂的选择器。<code> </code>,  <code>&gt;</code> , <code>+</code> , <code>~</code></p>
<h4 id="后代选择器">后代选择器</h4>
<p>选择 <code>.bt</code> 匹配的元素下的所有 p 元素，无论是子还是孙。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bt</span> <span class="selector-tag">p</span> &#123; &#125; </span><br></pre></td></tr></table></figure>
<h4 id="子代关系选择器">子代关系选择器</h4>
<p>选择 <code>.bt</code> 匹配的元素下的直接子元素的 <code>p</code> 元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bt</span> &gt; <span class="selector-tag">p</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<h4 id="相邻兄弟选择器">相邻兄弟选择器</h4>
<p>选择紧跟在 <code>p</code> 元素后的  <code>img</code> 元素，而不是 <code>p</code> 元素和 <code>img</code> 元素一起选。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> + <span class="selector-tag">img</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<h4 id="通用兄弟选择器">通用兄弟选择器</h4>
<p>类似于相邻兄弟选择器，无需相邻，只需紧跟其后和同级。</p>
<ul>
<li>后代选择器—— <code> </code>（空格键）——选择后代中所有匹配的元素，无论是子还是孙。</li>
<li>子代选择器—— <code>&gt;</code> ——选择直接子元素。</li>
<li>相邻兄弟选择器—— <code>+</code> ——选择同级且相邻。（紧跟其后）</li>
<li>通用兄弟选择器—— <code>~</code> — —同级无需相邻。（单但仍需在后面）</li>
</ul>
<table>
<thead>
<tr>
<th>Combinators</th>
<th>Select</th>
</tr>
</thead>
<tbody>
<tr>
<td>A,B</td>
<td>匹配满足A（和/或）B的任意元素.</td>
</tr>
<tr>
<td>A B</td>
<td>匹配任意元素，满足条件：B是A的后代结点（B是A的子节点，或者A的子节点的子节点）</td>
</tr>
<tr>
<td>A &gt; B</td>
<td>匹配任意元素，满足条件：B是A的直接子节点</td>
</tr>
<tr>
<td>A + B</td>
<td>匹配任意元素，满足条件：B是A的下一个兄弟节点（AB有相同的父结点，并且B紧跟在A的后面）</td>
</tr>
<tr>
<td>A ~ B</td>
<td>匹配任意元素，满足条件：B是A之后的兄弟节点中的任意一个（AB有相同的父节点，B在A之后，但不一定是紧挨着A）</td>
</tr>
</tbody>
</table>
<h2 id="选择器参考表">选择器参考表</h2>
<table>
<thead>
<tr>
<th style="text-align:left">选择器</th>
<th style="text-align:left">示例</th>
<th style="text-align:left">学习CSS的教程</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Type_selectors">类型选择器</a></td>
<td style="text-align:left"><code>h1 &#123; &#125;</code></td>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#Type_selectors">类型选择器</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors">通配选择器</a></td>
<td style="text-align:left"><code>* &#123; &#125;</code></td>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#The_universal_selector">通配选择器</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Class_selectors">类选择器</a></td>
<td style="text-align:left"><code>.box &#123; &#125;</code></td>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#Class_selectors">类选择器</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/ID_selectors">ID选择器</a></td>
<td style="text-align:left"><code>#unique &#123; &#125;</code></td>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#ID_Selectors">ID选择器</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors">标签属性选择器</a></td>
<td style="text-align:left"><code>a[title] &#123; &#125;</code></td>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Attribute_selectors">标签属性选择器</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">伪类选择器</a></td>
<td style="text-align:left"><code>p:first-child &#123; &#125;</code></td>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Pseuso-classes_and_Pseudo-elements#What_is_a_pseudo-class">伪类</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements">伪元素选择器</a></td>
<td style="text-align:left"><code>p::first-line &#123; &#125;</code></td>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Pseuso-classes_and_Pseudo-elements#What_is_a_pseudo-element">伪元素</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Descendant_combinator">后代选择器</a></td>
<td style="text-align:left"><code>article p</code></td>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#Descendant_Selector">后代运算符</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Child_combinator">子代选择器</a></td>
<td style="text-align:left"><code>article &gt; p</code></td>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#Child_combinator">子代选择器</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Adjacent_sibling_combinator">相邻兄弟选择器</a></td>
<td style="text-align:left"><code>h1 + p</code></td>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#Adjacent_sibling">相邻兄弟</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/General_sibling_combinator">通用兄弟选择器</a></td>
<td style="text-align:left"><code>h1 ~ p</code></td>
<td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#General_sibling">通用兄弟</a></td>
</tr>
</tbody>
</table>
<h2 id="课后练习：小试牛刀答案">课后练习：小试牛刀答案</h2>
<h3 id="Selectors-One">Selectors One</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">200%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Selectors-Two">Selectors Two</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#special</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert</span><span class="selector-class">.stop</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert</span><span class="selector-class">.go</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Selectors-Three">Selectors Three</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">150%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>n) &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Selectors-Four">Selectors Four</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.list</span> &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Selectors-Five">Selectors Five</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href*=<span class="string">&quot;contact&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^=<span class="string">&quot;https&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>参考自</strong></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors">MDN-CSS选择器</a></p>
<p><a href="https://segmentfault.com/a/1190000013424772">CSS 选择器，一篇就够了</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>选择器</tag>
        <tag>伪类</tag>
        <tag>伪元素</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习笔记｜MDN-如何构建CSS</title>
    <url>/2022/MDNHowToBuildCSS.html</url>
    <content><![CDATA[<p>记录在MDN学习CSS中的一些个人笔记。</p>
<span id="more"></span>
<h2 id="如何使用CSS">如何使用CSS</h2>
<h3 id="外部样式表">外部样式表</h3>
<p>即把CSS样式写在外部文件，通过 head 标签中的 <code>&lt;link&gt; </code>  引入。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    xxx</span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>href</code> 属性置顶要引入的CSS文件路径，可以是网络文件也可以是本地文件。</p>
<h3 id="内部样式表">内部样式表</h3>
<p>把CSS样式写在HTML文件的 <code>&lt;head&gt;</code> 标签里的 <code>&lt;style&gt;</code>	标签之中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    xxx</span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      xxx</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="内联样式">内联样式</h3>
<p>写在HTML元素的style属性之中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>This is my first CSS example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>不推荐使用。</p>
<h2 id="选择器">选择器</h2>
<p>使用不用的选择器选择HTML元素并美化它。</p>
<h2 id="函数">函数</h2>
<p>看起来CSS像是标记一样，只需要填写对应的值，但它其实也有函数。如：</p>
<h3 id="calc">calc()</h3>
<p>进行简单计算，如： <code>calc(100 / 6)</code></p>
<h2 id="规则">@规则</h2>
<p>一些特殊的规则。</p>
<p>如 <code>@import</code> ，用于导入样式表。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;styles2.css&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>或是 <code>@import</code> ，媒体查询。</p>
<h2 id="速记属性">速记属性</h2>
<p>将多个属性值合并写在一个。如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span> <span class="number">15px</span> <span class="number">5px</span>;</span><br></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">padding-right</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br></pre></td></tr></table></figure>
<p>类似的还有font、background、border、margin等。</p>
<h2 id="注释">注释</h2>
<p>使用 <code>/*  */</code> ，不能用 <code>//</code> 。</p>
<p>参考自</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/First_steps/How_CSS_is_structured">MDN-如何构建CSS</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习笔记｜MDN-层叠与继承</title>
    <url>/2022/MDN_Cascade_and_inheritance.html</url>
    <content><![CDATA[<p>记录在MDN学习CSS中的一些个人笔记。</p>
<span id="more"></span>
<h2 id="三个概念">三个概念</h2>
<p><strong>层叠、优先级、继承</strong></p>
<h3 id="层叠">层叠</h3>
<p>同级别规则，后面覆盖前面的。</p>
<h3 id="优先级">优先级</h3>
<p>当有多个规则有不同选择器时会根据优先级决定使用哪个规则。约束范围越小优先级越高。</p>
<h3 id="继承">继承</h3>
<p>有些元素可以继承父元素的 CSS 属性，有些则不可以。</p>
<h2 id="理解继承">理解继承</h2>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance#%E7%90%86%E8%A7%A3%E7%BB%A7%E6%89%BF">MDN-理解继承案例</a></p>
<p>如上面所说，不是所有属性都可以继承，可以根据常识判断：如果某个属性继承之后会对界面或者说编码造成影响，不是我们想要的，那么它很大概率是不能继承的。</p>
<h3 id="控制继承">控制继承</h3>
<p>四个特殊值，用于控制继承。</p>
<h4 id="inherit">inherit</h4>
<p>继承父元素属性。</p>
<h4 id="initial">initial</h4>
<p>设置为 CSS 属性初始值。但并不是浏览器默认样式。</p>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;bt&quot;</span>&gt;</span>这是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;bt&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:initial&quot;</span>&gt;</span>这是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;bt&quot;</span> <span class="attr">style</span>=<span class="string">&quot;all:initial&quot;</span>&gt;</span>这是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bt</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2022/01/inherit%E7%A4%BA%E4%BE%8B.png" alt="inherit示例"></p>
<h4 id="unset">unset</h4>
<p>设置为自然值，可以继承就继承（inherit），没继承就默认值（initial）。</p>
<h4 id="revert">revert</h4>
<p>还原成浏览器默认样式。</p>
<h4 id="注意">注意</h4>
<p>all：当前元素所有属性</p>
<h2 id="理解层叠">理解层叠</h2>
<p>如何应用 CSS 规则，按照这三点排，由前往后：</p>
<ol>
<li>重要程度</li>
<li>优先级</li>
<li>资源顺序</li>
</ol>
<h3 id="重要程度">重要程度</h3>
<p><code>!important</code></p>
<p>最高等级，忽略所有。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br></pre></td></tr></table></figure>
<p>覆盖 <code>!important</code> 的唯一方法就是另一个 <code>!important</code> ，但必须在第二第三条规则上胜出。如优先级更高或同等优先级顺序更靠后。</p>
<blockquote>
<p>尽量不用 <code>!important</code></p>
</blockquote>
<h3 id="优先级-2">优先级</h3>
<p>范围更小优先级更高，可计算。</p>
<ol>
<li>千位1000：内联样式</li>
<li>百位0100：id选择器</li>
<li>十位0010：类选择器、属性选择器、伪类</li>
<li>个位0001：元素、伪元素选择器</li>
</ol>
<p>最后根据</p>
<blockquote>
<p><strong>注</strong>: 通用选择器 (<code>*</code>)，组合符 (<code>+</code>, <code>&gt;</code>, <code>~</code>, ’ ')，和否定伪类 (<code>:not</code>) 不会影响优先级。</p>
</blockquote>
<blockquote>
<p><strong>警告:</strong> 在进行计算时不允许进行进位，例如，20 个类选择器仅仅意味着 20 个十位，而不能视为 两个百位，也就是说，无论多少个类选择器的权重叠加，都不会超过一个 ID 选择器。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">选择器</th>
<th style="text-align:left">千位</th>
<th style="text-align:left">百位</th>
<th style="text-align:left">十位</th>
<th style="text-align:left">个位</th>
<th style="text-align:left">优先级</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>h1</code></td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0001</td>
</tr>
<tr>
<td style="text-align:left"><code>h1 + p::first-letter</code></td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">3</td>
<td style="text-align:left">0003</td>
</tr>
<tr>
<td style="text-align:left"><code>li &gt; a[href*=&quot;en-US&quot;] &gt; .inline-warning</code></td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">2</td>
<td style="text-align:left">2</td>
<td style="text-align:left">0022</td>
</tr>
<tr>
<td style="text-align:left"><code>#identifier</code></td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0100</td>
</tr>
<tr>
<td style="text-align:left"><code>内联样式</code></td>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1000</td>
</tr>
</tbody>
</table>
<h2 id="主动学习">主动学习</h2>
<p>我的答案</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#outer</span> <span class="selector-id">#inner</span> <span class="selector-tag">ul</span> <span class="selector-class">.nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line"> <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>官方答案</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#outer</span> <span class="selector-id">#inner</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: initial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考自</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance">MDN-层叠与继承</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>QTTabBar安装与使用: 更胜浏览器的Windows平台浏览文件方式</title>
    <url>/2020/QTTabBarInstallationAndUse.html</url>
    <content><![CDATA[<p>更高效的使用资源管理器</p>
<span id="more"></span>
<h1>1. 介绍</h1>
<h2 id="功能">功能</h2>
<p>窗口合并</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/04/14QTTabBar/windowsunite.png" alt="windowsunite.png"></p>
<p>照片视频文本预览，且支持选择哪种格式预览</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/04/14QTTabBar/yulan.gif" alt=""></p>
<p>很多…按需</p>
<p>缺点</p>
<ol>
<li>在资源管理器下，鼠标侧键失效，补偿：“Alt+左/右”可以实现前进后退</li>
<li>如果接受不了，那么这款软件并不适合你，或者你可以寻找更优解决方案</li>
</ol>
<h2 id="后面是废话，可以直接跳到安装部分">后面是废话，可以直接跳到安装部分</h2>
<h2 id="Why">Why?</h2>
<p>可能你像我一样，爱折腾，患有强迫症，一定要对文件分类，那么当你整理一些资料，或者说按照网上的教程，到xxx目录改xxx，接下来还要到xxx目录改xxx…相信你会疯狂双击鼠标左键。而且画面会逐渐混乱…</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/04/14QTTabBar/winbedlam.png" alt=""></p>
<p>学生党，有时候处理很多学校文档、编程源码文件、学习资料。可能你会快捷键，疯狂“Alt+Tab”，但是你可能会遇到切错文件夹或者直接切到别的软件去了，要想精准找到你想切换的文件夹，也许还需要那么1秒。而QTTabBar就可以解决这些问题。</p>
<h2 id="What？">What？</h2>
<ol>
<li>QTTabBar就是一个文件浏览增强工具</li>
<li>有种“插件的感觉”，实际上就是个插件，还是个“IE浏览器插件”，为什么？因为资源管理器就是一种特殊的浏览器，只不过浏览的是你电脑磁盘里的文件，其实浏览器一样可以浏览，试试在浏览器地址栏中输入“file:///文件路径”，比如“file:///E:/phpstudy_pro/”，一样可以浏览文件与文件夹。举个例子，你的老师或者是你，是否用过FTP，而FTP在浏览器和资源管理器都可以访问。  （反正我用过，我高中老师也用</li>
</ol>
<h1>2. 安装</h1>
<p>注意：先安装1038版本，再安装1040版本，1040其实是个差异更新。官网链接：<a href="http://qttabbar.wikidot.com/">http://qttabbar.wikidot.com/</a><br>
官网下载很慢，<a href="https://sn9.us/file/17786953-403832842">点这快速下载</a>   #链接来源网络#</p>
<p>安装之后看不到，实际已经安装好，按下“win”键，就能看到（出现下图就是安装成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/04/14QTTabBar/winsee.png" alt=""></p>
<h1>3. 使用与配置</h1>
<h2 id="3-1-开始使用">3.1 开始使用</h2>
<p>打开资源管理器-&gt;查看-&gt;选项-&gt;勾上QTTabBar</p>
<blockquote>
<p>若勾选无反应或者无QTTabBar勾选，请到任务管理器重启资源管理器重试</p>
<p>再不行就到IE浏览器-&gt;Internet选项-&gt;程序-&gt;管理加载项-&gt;找到QTTabBar右键启动</p>
</blockquote>
<p>重启资源管理器<br>
<img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//test1/RestartExplorer.gif" alt=""></p>
<p>再不行，重启自行解决，友情链接<a href="http://www.google.com/">google</a></p>
<h2 id="3-2-汉化">3.2 汉化</h2>
<p>方法一：下载汉化文件，直接使用，个人亲测无效，不代表整体</p>
<p>方法二：空白处右键-&gt;选择QTTabBar Options-&gt;左侧General-&gt;Download language file-&gt;找到简体中文(推荐吃爆米花的小熊)-&gt;双击选择合适的位置保存-&gt;回到设置-&gt;点击刚刚下载按钮上方的三点-&gt;选择刚刚保存的汉化包-&gt;右下角Apply-&gt;关闭所有资源管理器</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/04/14QTTabBar/changelanguage.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/04/14QTTabBar/changelanguagetwo.png" alt=""></p>
<blockquote>
<p>若失效：任务管理器重启资源管理器</p>
<p>如果没有&quot;Download language file&quot;，请卸载重装，卸载在文末</p>
</blockquote>
<h2 id="3-3-预览">3.3 预览</h2>
<h3 id="开启">开启</h3>
<p>设置-&gt;预览提示-&gt;常规-&gt;显示预览提示</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/04/14QTTabBar/preview.png" alt=""></p>
<h3 id="使用">使用</h3>
<p>默认为鼠标悬停即可预览</p>
<h3 id="配置">配置</h3>
<p>默认预览文件类型有图片视频音频文本（视频和音频是有声音的），可以在设置中取消或者添加全尺寸预览（看上图</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/04/14QTTabBar/noopenbig.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/04/14QTTabBar/openbig.png" alt=""></p>
<h3 id="问题">问题</h3>
<blockquote>
<p>视频预览反转：1. 请重装软件   2.我有些视频也这样，可能是视频问题？预览速度过快：无解…QAQ</p>
</blockquote>
<h2 id="标签卡关闭按钮">标签卡关闭按钮</h2>
<p>标签设置-&gt;关闭按钮，图标，锁定-&gt;在标签上显示关闭按钮</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/04/14QTTabBar/x.png" alt=""></p>
<h2 id="群组">群组</h2>
<p>加入群组，类似于浏览器的书签，快速访问</p>
<h2 id="快捷键">快捷键</h2>
<blockquote>
<p>鼠标滚轮快速切换标签</p>
<p>Ctrl + Tab 下一个标签页<br>
Ctrl + Shift + Tab上一个标签页<br>
Ctrl + Num0 – Num9 打开几号标签页<br>
Ctrl + W 关闭当前标签页（  tips以上对于chrome浏览器同样使用</p>
<p>Ctrl + Shift + W 关闭除当然标签页以外的标签页<br>
Ctrl + Shift + Z 恢复打开刚才关闭的标签页<br>
Ctrl + O open dialog for folder<br>
Ctrl + L 锁定/解除标签页<br>
Ctrl + N 关闭当然标签页<br>
Alt + F4 直接把窗口关了，多数软件都使用</p>
</blockquote>
<h1>4. 卸载</h1>
<p>要在1038版本安装包卸载，点击uninstall即可，控制面板无法卸载</p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://sspai.com/post/52521">QTTabBar 「资源管理器」该有的样子</a></li>
<li><a href="https://blog.csdn.net/Edogawa_Konan/article/details/83904742">抛弃clover，爱上QTTabBar</a></li>
</ol>
]]></content>
      <categories>
        <category>软件&amp;工具&amp;技巧</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学生成绩管理系统</title>
    <url>/2020/StudentAchievementManagementSystem.html</url>
    <content><![CDATA[<p>C语言——学生成绩管理系统详解</p>
<span id="more"></span>
<p>引言：最近写了C语言的大作业，感觉做得还行，记录一下，给后人一些参考，给自己留更深印象方便后续改进！</p>
<p>不知道发了这篇博客会不会认为我抄袭…害怕.jpg</p>
<h1>一、系统概述</h1>
<p>使用单向链表和文件作为基本数据结构，设计一个学生成绩管理程序，管理某学校学生成绩。<br>
[1]插入数据<br>
[2]修改对应数据项的数据<br>
[3]删除对应学号的信息<br>
[4]查找某学号的信息<br>
[5]查找不及格学生<br>
[6]对学生成绩进行排名<br>
[7]统计各个等级的学生人数<br>
[8]输出所有学生信息<br>
[9]分页显示学生信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemmodular.png" alt=""></p>
<h1>二、数据类型</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//枚举</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">sex</span>&#123;</span>women,man&#125;; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span>&#123;</span></span><br><span class="line">	<span class="type">int</span>  xh;                   <span class="comment">//学号</span></span><br><span class="line">	<span class="type">char</span> xm[<span class="number">20</span>];               <span class="comment">//姓名 </span></span><br><span class="line">	<span class="class"><span class="keyword">enum</span> <span class="title">sex</span>  <span class="title">xb</span>;</span>              <span class="comment">//性别 </span></span><br><span class="line">	<span class="type">int</span>  cj;                   <span class="comment">//成绩，范围[0,100]    前四个为输入项 </span></span><br><span class="line">	<span class="type">char</span> dj;                   <span class="comment">//等级</span></span><br><span class="line">	<span class="type">int</span>  mc;                   <span class="comment">//名次</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">next</span>;</span>      <span class="comment">//下一项 </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> sex[][<span class="number">3</span>]=&#123;<span class="string">&quot;女&quot;</span>,<span class="string">&quot;男&quot;</span>&#125;;     <span class="comment">//用于输出“男女”中文字符 </span></span><br><span class="line"><span class="type">int</span> size=<span class="keyword">sizeof</span>(<span class="keyword">struct</span> StuLink);  <span class="comment">//节点字节大小 </span></span><br></pre></td></tr></table></figure>
<ol>
<li>注意姓名是xm[20]，是字符串；而等级是cj，单个字符；这会影响到赋值问题</li>
<li>其中姓名、性别、成绩是输入项，名字、等级、名次由程序计算得出</li>
</ol>
<h1>三、自定义函数说明</h1>
<p><strong>1. main 函数</strong></p>
<p>函数首部：void main</p>
<p>参数列表：<br>
[1] menu1：用于接收一级菜单选择<br>
[2] menu2：用于接收一级菜单选择<br>
[3] i：用于 for 循环迭代变量<br>
[4]n：用于接收“插入数据”功能的学生个数<br>
[5] dj_add[5]：用于储存各等级人数<br>
[6] head：用于储存头节点的地址<br>
[7]pw：用于储存尾节点的地址</p>
<p>返回值：无</p>
<p>实现功能：选择对应功能并实现</p>
<p>算法描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//	声明变量</span></span><br><span class="line">	<span class="type">int</span> menu1,menu2;        <span class="comment">//menu1:一级菜单 menu2:二级菜单  </span></span><br><span class="line">	<span class="type">int</span> i=<span class="number">0</span>,n,dj_add[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">head</span>=</span><span class="literal">NULL</span>,*pw;   <span class="comment">//*head:学生信息链表头指针 pw:尾节点 </span></span><br><span class="line">	</span><br><span class="line"><span class="comment">//  声明函数</span></span><br><span class="line"><span class="comment">// 从数据文件中逐行读取学生信息生成学生链表,返回头指针 </span></span><br><span class="line">	<span class="keyword">struct</span> StuLink *<span class="title function_">ReadFromFile</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//	先将学生链表按学号升序排序，再将学生链表中的数据逐行保存到数据文件</span></span><br><span class="line">	<span class="type">void</span> <span class="title function_">SaveToFile</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>;</span><br><span class="line"><span class="comment">//	SortLink函数：按指定数据项的顺序【1:学号（升序）】或者【2:成绩（降序）】对学生链表进行排序 </span></span><br><span class="line">	<span class="keyword">struct</span> StuLink *<span class="title function_">SortLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> i)</span>; </span><br><span class="line"><span class="comment">//	InsertNode函数：在链表尾插入一个新结点。新结点的学号是链表中最大学号加1，姓名和成绩从键盘输入</span></span><br><span class="line"><span class="comment">//	（注意：成绩必须在[0,100]区间的整数），根据成绩计算等级。</span></span><br><span class="line"><span class="comment">//	注意：插入结点会导致链表中各结点名次的变化。</span></span><br><span class="line">	<span class="keyword">struct</span> StuLink *<span class="title function_">InsertNode</span><span class="params">(<span class="keyword">struct</span> StuLink *pw)</span>;</span><br><span class="line"><span class="comment">//	EditNode函数：修改链表中指定学号的结点（学号不能修改，成绩必须在[0,100]区间的整数）</span></span><br><span class="line"><span class="comment">//	注意：当修改成绩时会导致等级和名次的变化</span></span><br><span class="line">	<span class="type">void</span> <span class="title function_">EditNode</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>; </span><br><span class="line"><span class="comment">//DeleteNode函数：删除链表中指定学号的结点。注意：删除结点会导致链表中各结点名次的变化</span></span><br><span class="line">	<span class="keyword">struct</span> StuLink *<span class="title function_">DeleteNode</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>;</span><br><span class="line"><span class="comment">//	QueryNode函数：查询链表中指定学号的结点，并显示查询结果。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QueryNode</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>;</span><br><span class="line"><span class="comment">//	QueryLink函数：查询链表中不及格的所有结点，并显示查询结果。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QueryLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>;</span><br><span class="line"><span class="comment">//RankLink函数：计算链表中每个结点的名次。名次规则：按成绩降序排名，从第1名开始依次排名，</span></span><br><span class="line"><span class="comment">//若出现并列名次，则名次需要叠加。例如，若出现5个并列第1名，则没有第2名，下一个名次是第6名，依此类推。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RankLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>;</span><br><span class="line"><span class="comment">//AnalysisLink函数：统计并返回各等级人数。等级标准：</span></span><br><span class="line"><span class="comment">//A：90及以上		B：80及以上		C：70及以上		D：60及以上		E：60以下</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">AnalysisLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> *dj_add)</span>;</span><br><span class="line"><span class="comment">//OutputLink_1函数：按指定数据项的顺序【1:学号（升序）】或者【2:成绩（降序）】输出学生成绩表、各等级人数。</span></span><br><span class="line"><span class="comment">//学生成绩表每行输出一个学生信息（依次为学号、姓名、性别、成绩、等级和名次，各项间以1个空格隔开），</span></span><br><span class="line"><span class="comment">//各等级人数分行输出。</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">OutputLink_1</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> i)</span>;</span><br><span class="line"><span class="comment">//OutputLink_2函数：分页显示全部学生的信息。</span></span><br><span class="line"><span class="comment">//分页功能：每页显示10个学生信息，有上一页、下一页、首页和最后一页的翻页功能。</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">OutputLink_2</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> i)</span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	执行语句</span></span><br><span class="line">	head=ReadFromFile();     <span class="comment">//读取文件到链表，获取头指针 </span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	菜单</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		system(<span class="string">&quot;cls&quot;</span>);                  <span class="comment">//清控制台，Windows </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);<span class="comment">//40个=</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=           学生成绩管理程序           =\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=                              by：xxx =\n&quot;</span>); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=        1-数据维护  2-数据查询        =\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=        3-统计分析  4-报表输出        =\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=                0-退出                =\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line"><span class="comment">//		printf(&quot;\n&quot;);</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu1); </span><br><span class="line">		<span class="keyword">switch</span>(menu1)&#123;                 <span class="comment">//一级菜单 </span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				<span class="keyword">while</span>(<span class="number">1</span>)&#123;                      <span class="comment">//循环输出二级菜单 </span></span><br><span class="line">					system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=        1-数据插入  2-数据修改        =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=        3-数据删除  0-返回上级        =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu2); </span><br><span class="line">					<span class="keyword">switch</span>(menu2)&#123;      <span class="comment">//二级菜单 </span></span><br><span class="line">						<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的学生个数(n&gt;0): &quot;</span>); </span><br><span class="line">							<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">							<span class="keyword">while</span>(n&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">								<span class="built_in">printf</span>(<span class="string">&quot;！！！请输入正确的学生个数！！！： &quot;</span>);</span><br><span class="line">								<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">							&#125;</span><br><span class="line">							pw=head;</span><br><span class="line">							<span class="keyword">if</span>(pw)&#123;</span><br><span class="line">								<span class="keyword">while</span>(pw-&gt;next)   <span class="comment">//获取尾部节点 </span></span><br><span class="line">									pw=pw-&gt;next;</span><br><span class="line">							&#125;</span><br><span class="line">							</span><br><span class="line">							<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">								pw=InsertNode(pw);</span><br><span class="line">								<span class="keyword">if</span>(head==<span class="literal">NULL</span>) head=pw;</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="comment">//	计算名次</span></span><br><span class="line">							RankLink(head);</span><br><span class="line"><span class="comment">//							SaveToFile(head);		</span></span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">							EditNode(head);</span><br><span class="line">							<span class="comment">//	计算名次</span></span><br><span class="line">							RankLink(head);</span><br><span class="line"><span class="comment">//							SaveToFile(head);</span></span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">							head=DeleteNode(head);</span><br><span class="line">							<span class="comment">//	计算名次</span></span><br><span class="line">							RankLink(head);</span><br><span class="line"><span class="comment">//							SaveToFile(head);	</span></span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(menu2==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				<span class="keyword">while</span>(<span class="number">1</span>)&#123;                      <span class="comment">//循环输出二级菜单 </span></span><br><span class="line">					system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=1-学号查询 2-不及格学生查询 0-返回上级=\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu2); </span><br><span class="line">					<span class="keyword">switch</span>(menu2)&#123;      <span class="comment">//二级菜单 </span></span><br><span class="line">						<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">							QueryNode(head);</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">							QueryLink(head); </span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(menu2==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				<span class="keyword">while</span>(<span class="number">1</span>)&#123;                      <span class="comment">//循环输出二级菜单 </span></span><br><span class="line">					system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=    1-成绩名次计算  2-成绩频次分析    =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=              0-返回上级              =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu2); </span><br><span class="line">					<span class="keyword">switch</span>(menu2)&#123;      <span class="comment">//二级菜单 </span></span><br><span class="line">						<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">							RankLink(head);</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">							AnalysisLink(head,dj_add);</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;&#x27;A&#x27;有%d人；&#x27;B&#x27;有%d人，&#x27;C&#x27;有%d人，&#x27;D&#x27;有%d人，&#x27;E&#x27;有%d人，共有%d人\n&quot;</span>,</span><br><span class="line">							dj_add[<span class="number">0</span>],dj_add[<span class="number">1</span>],dj_add[<span class="number">2</span>],dj_add[<span class="number">3</span>],dj_add[<span class="number">4</span>],dj_add[<span class="number">0</span>]+dj_add[<span class="number">1</span>]+dj_add[<span class="number">2</span>]+dj_add[<span class="number">3</span>]+dj_add[<span class="number">4</span>]); </span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>); </span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(menu2==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				<span class="keyword">while</span>(<span class="number">1</span>)&#123;                      <span class="comment">//循环输出二级菜单 </span></span><br><span class="line">					system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=1-排序显示学生信息  2-分页显示学生信息=\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=              0-返回上级              =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu2); </span><br><span class="line">					<span class="keyword">switch</span>(menu2)&#123;      <span class="comment">//二级菜单 </span></span><br><span class="line">						<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;请选择按【1:学号（升序）】或者【2:成绩（降序）】输出学生成绩表：&quot;</span>);</span><br><span class="line">							<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">							<span class="keyword">while</span>((i!=<span class="number">1</span>)&amp;&amp;(i!=<span class="number">2</span>))&#123;</span><br><span class="line">								<span class="built_in">printf</span>(<span class="string">&quot;！！！请选择正确选项！！！1 or 2 ： &quot;</span>);</span><br><span class="line">								<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">							&#125;</span><br><span class="line">							OutputLink_1(head,i);</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">							system(<span class="string">&quot;pause&quot;</span>); </span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;请选择按【1:学号（升序）】或者【2:成绩（降序）】输出学生成绩表：&quot;</span>);</span><br><span class="line">							<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">							<span class="keyword">while</span>((i!=<span class="number">1</span>)&amp;&amp;(i!=<span class="number">2</span>))&#123;</span><br><span class="line">								<span class="built_in">printf</span>(<span class="string">&quot;！！！请选择正确选项！！！1 or 2 ： &quot;</span>);</span><br><span class="line">								<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">							&#125;</span><br><span class="line">							OutputLink_2(head,i);</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(menu2==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;=        你已经退出学生管理系统        =\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span>;       <span class="comment">//退出main函数 </span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p><strong>2. ReadFromFile 函数</strong></p>
<p>函数首部：struct StuLink *ReadFromFile()</p>
<p>参数列表：<br>
[1]fp：用于储存储存在缓冲区的文件地址<br>
[2]p1：用于储存开辟的新节点的地址<br>
[3]p2：用于储存尾节点的地址<br>
[4]head：用于储存首节点的地址<br>
[5]ch：用于接收文件第一个字符</p>
<p>返回值：head 的地址</p>
<p>实现功能：<br>
1.写打开文件<br>
2.2.读取文件第一个字符，若是 EOF 文件终止符，则返回 head 的指针，函数结束；否则将 fp 的地址重置为文件开头<br>
3.3.循环：若 fp 指针不为空，则开辟新节点，并且接入链表的尾节点（根据情况），读取 文件第一行信息并且赋值到 p1 指向的节点中<br>
4.4．写关闭文件，返回 head 的地址</p>
<p>算法描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> StuLink *<span class="title function_">ReadFromFile</span><span class="params">()</span>&#123;</span><br><span class="line">	FILE *fp;                           <span class="comment">//指向student.dat文件 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>,*<span class="title">p2</span>,*<span class="title">head</span>=</span><span class="literal">NULL</span>;  <span class="comment">//head：头节点  p1：开辟新节点  p2：尾节点 </span></span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>((fp=fopen(<span class="string">&quot;student.dat&quot;</span>,<span class="string">&quot;r&quot;</span>))==<span class="literal">NULL</span>)&#123;   <span class="comment">//读开student.dat </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;打开student.dat失败\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">	&#125; </span><br><span class="line">	ch=fgetc(fp);                               <span class="comment">//读取文件第一个字符</span></span><br><span class="line">	<span class="keyword">if</span>(ch==EOF)&#123;                                <span class="comment">//EOF文件终止符</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;文件为空\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> head;	</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		rewind(fp);                            <span class="comment">// 将fp的地址重置为文件开头</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(!feof(fp))&#123;</span><br><span class="line">		<span class="keyword">if</span>((p1=(<span class="keyword">struct</span> StuLink *)<span class="built_in">malloc</span>(size))==<span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;不能成功分配储存块&quot;</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		p1-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">if</span>(head==<span class="literal">NULL</span>)  head=p1;        <span class="comment">//首节点 </span></span><br><span class="line">			<span class="keyword">else</span> p2-&gt;next=p1;     <span class="comment">//非首节点，表尾插入新节点 </span></span><br><span class="line">		p2=p1;                    <span class="comment">// p2指向新的表尾结点 </span></span><br><span class="line">		<span class="built_in">fscanf</span>(fp,<span class="string">&quot;%d %s %d %d %s %d\n&quot;</span>,&amp;p1-&gt;xh,p1-&gt;xm,&amp;p1-&gt;xb,&amp;p1-&gt;cj,&amp;p1-&gt;dj,&amp;p1-&gt;mc);</span><br><span class="line"><span class="comment">//		读取\n是防止fp以为文件未完 </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-5d%-10s%-5d%-5d%-5c%-5d\n&quot;</span>,p1-&gt;xh,p1-&gt;xm,p1-&gt;xb,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);                                 <span class="comment">//关闭student.dat</span></span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p><strong>3. SortLink 函数</strong></p>
<p>函数首部：struct StuLink *SortLink(struct StuLink *head,int i)</p>
<p>参数列表：<br>
[1]head：储存首节点的地址<br>
[2]i：用于储存排序方式的选项<br>
[3]xh：用于储存学号<br>
[4]xb：用于储存性别<br>
[5]cj：用于储存成绩<br>
[6]mc：用于储存名次<br>
[7]xm：用于储存姓名<br>
[8]dj：用于储存等级<br>
[9]p1：用于表示被比较节点的地址<br>
[10]p2：用于表示比较节点的地址<br>
[11]p3：用于表示中间节点的地址</p>
<p>返回值：head 的地址</p>
<p>实现功能：</p>
<ol>
<li>判断 head 是否为空，为空则返回 head 并且结束函数</li>
<li>进行排序，快速排序，交换连个节点的数据项，而不是改变链表的节点信息</li>
<li>返回 head，结束函数</li>
</ol>
<p>算法描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> StuLink *<span class="title function_">SortLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(head==<span class="literal">NULL</span>)<span class="keyword">return</span> head;</span><br><span class="line"><span class="comment">//		使用交换数据的形式交换两个节点 </span></span><br><span class="line">		<span class="type">int</span> xh,xb,cj,mc;</span><br><span class="line">		<span class="type">char</span> xm[<span class="number">20</span>],dj;</span><br><span class="line"><span class="comment">//		p1:被比较节点  p2:比较节点  p3:快速排序储存节点 </span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head,*p2=head-&gt;next,*p3=p1;</span><br><span class="line">		<span class="keyword">switch</span>(i)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//				快速排序</span></span><br><span class="line">				<span class="keyword">while</span>(p1-&gt;next)&#123;</span><br><span class="line">					p2=p1-&gt;next;</span><br><span class="line">					p3=p1;</span><br><span class="line">					<span class="keyword">while</span>(p2)&#123;</span><br><span class="line">						<span class="keyword">if</span>(p3-&gt;xh&gt;p2-&gt;xh) </span><br><span class="line">							p3=p2;</span><br><span class="line">						p2=p2-&gt;next;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(p3-&gt;xh&lt;p1-&gt;xh)&#123;</span><br><span class="line">						xh=p3-&gt;xh;  xb=p3-&gt;xb;</span><br><span class="line">						cj=p3-&gt;cj;  mc=p3-&gt;mc;</span><br><span class="line">						<span class="built_in">strcpy</span>(xm,p3-&gt;xm);  dj=p3-&gt;dj;</span><br><span class="line">						p3-&gt;xh=p1-&gt;xh;  p3-&gt;xb=p1-&gt;xb;</span><br><span class="line">						p3-&gt;cj=p1-&gt;cj;  p3-&gt;mc=p1-&gt;mc;</span><br><span class="line">						<span class="built_in">strcpy</span>(p3-&gt;xm,p1-&gt;xm);  p3-&gt;dj=p1-&gt;dj;</span><br><span class="line">						p1-&gt;xh=xh;  p1-&gt;xb=xb;</span><br><span class="line">						p1-&gt;cj=cj;  p1-&gt;mc=mc;</span><br><span class="line">						<span class="built_in">strcpy</span>(p1-&gt;xm,xm);  p1-&gt;dj=dj;</span><br><span class="line">					&#125; </span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">				&#125; </span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">//				快速排序</span></span><br><span class="line">				<span class="keyword">while</span>(p1-&gt;next)&#123;</span><br><span class="line">					p2=p1-&gt;next;</span><br><span class="line">					p3=p1;</span><br><span class="line">					<span class="keyword">while</span>(p2)&#123;</span><br><span class="line">						<span class="keyword">if</span>(p3-&gt;cj&lt;p2-&gt;cj) </span><br><span class="line">							p3=p2;</span><br><span class="line">						p2=p2-&gt;next;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(p3-&gt;cj&gt;p1-&gt;cj)&#123;</span><br><span class="line">						xh=p3-&gt;xh;  xb=p3-&gt;xb;</span><br><span class="line">						cj=p3-&gt;cj;  mc=p3-&gt;mc;</span><br><span class="line">						<span class="built_in">strcpy</span>(xm,p3-&gt;xm);  dj=p3-&gt;dj;</span><br><span class="line">						p3-&gt;xh=p1-&gt;xh;  p3-&gt;xb=p1-&gt;xb;</span><br><span class="line">						p3-&gt;cj=p1-&gt;cj;  p3-&gt;mc=p1-&gt;mc;</span><br><span class="line">						<span class="built_in">strcpy</span>(p3-&gt;xm,p1-&gt;xm);  p3-&gt;dj=p1-&gt;dj;</span><br><span class="line">						p1-&gt;xh=xh;  p1-&gt;xb=xb;</span><br><span class="line">						p1-&gt;cj=cj;  p1-&gt;mc=mc;</span><br><span class="line">						<span class="built_in">strcpy</span>(p1-&gt;xm,xm);  p1-&gt;dj=dj;</span><br><span class="line">					&#125; </span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">				&#125; </span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">return</span> head;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4. SaveToFile 函数</strong></p>
<p>函数首部：void SaveToFile(struct StuLink *head)</p>
<p>参数列表：<br>
[1]head：用于表示首节点的地址<br>
[2]fp：用于表示缓冲区文件的地址<br>
[3]i：用于储存排序方式</p>
<p>返回值：无</p>
<p>实现功能：写开文件，循环将链表中的信息储存到文件中</p>
<p>算法描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">	<span class="type">void</span> <span class="title function_">SaveToFile</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>&#123;</span><br><span class="line">		FILE *fp;</span><br><span class="line">		<span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">		head=SortLink(head,i);</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p</span>=</span>head;</span><br><span class="line">		<span class="keyword">if</span>((fp=fopen(<span class="string">&quot;student.dat&quot;</span>,<span class="string">&quot;w&quot;</span>))==<span class="literal">NULL</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;写开文件失败！&quot;</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="comment">//			写入文件 </span></span><br><span class="line">			<span class="built_in">fprintf</span>(fp,<span class="string">&quot;%d %s %d %d %c %d\n&quot;</span>,p-&gt;xh,p-&gt;xm,p-&gt;xb,p-&gt;cj,p-&gt;dj,p-&gt;mc);</span><br><span class="line">			p=p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		fclose(fp); </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><strong>5. InsertNode 函数</strong></p>
<p>函数首部：struct StuLink *InsertNode</p>
<p>参数列表：<br>
[1]pw：用于表示链表尾节点的地址<br>
[2]p1：用于表示新节点的地址<br>
[3]xm：用于表示姓名字符串的地址</p>
<p>返回值：pw 的地址</p>
<p>实现功能：开辟一个新节点，用 p1 指向新节点，并向其赋值，同时检查性别和成绩的正确性， 根据成绩计算等级，再将 p1 接在 pw 后面</p>
<p>算法描述</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> StuLink *<span class="title function_">InsertNode</span><span class="params">(<span class="keyword">struct</span> StuLink *pw)</span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>;</span>    <span class="comment">//pw:原链表尾节点	 p1:开辟新节点 </span></span><br><span class="line">	<span class="keyword">if</span>((p1=(<span class="keyword">struct</span> StuLink *)<span class="built_in">malloc</span>(size))==<span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;不能成功分配储存块\n&quot;</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	p1-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span>(pw)</span><br><span class="line">		p1-&gt;xh=pw-&gt;xh+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		p1-&gt;xh=<span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> xm[<span class="number">20</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请依次输入姓名、性别(男1女0)、成绩[0,100]：  &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>,xm,&amp;p1-&gt;xb,&amp;p1-&gt;cj);</span><br><span class="line">	<span class="keyword">while</span>(p1-&gt;xb!=<span class="number">0</span>&amp;&amp;p1-&gt;xb!=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;! ! ! 性别只能是1或0，请重新输入性别1：男    0：女   &quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;xb); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(p1-&gt;cj&lt;<span class="number">0</span> || p1-&gt;cj&gt;<span class="number">100</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;! ! ! 成绩范围是0~100，请重新输入成绩   &quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;cj); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">strcpy</span>(p1-&gt;xm,xm);</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	p1-&gt;mc=1;  // 名次暂时命名为1 </span></span><br><span class="line">	<span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">90</span>) p1-&gt;dj=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">80</span>)  p1-&gt;dj=<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">70</span>)  p1-&gt;dj=<span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">60</span>)  p1-&gt;dj=<span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span> p1-&gt;dj=<span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span>(pw==<span class="literal">NULL</span>)	pw=p1;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		pw-&gt;next=p1;	</span><br><span class="line">		pw=pw-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> pw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>6. EditNode函数</strong></p>
<p>函数首部：void EditNode(struct StuLink *head)</p>
<p>参数列表：<br>
[1]head：用于表示首节点的地址<br>
[2]p1：用于表示循环寻找对应学号地址<br>
[3]xm：用于表示姓名字符串<br>
[4]n：用于表示要修改的学号<br>
[5]re：用于表示要修改的数据项</p>
<p>返回值：无 实现功能：先判断链表是否为空，为空则退出函数。输入一个学号，判断是否存在，不存在则退 出函数；存在则输出对应学生信息，选择要修改的数据项进行修改</p>
<p>返回值：无</p>
<p>算法描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EditNode</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head;</span><br><span class="line">	<span class="type">char</span> xm[<span class="number">20</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> n,re;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入你要修改的学生信息的学号：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n) ;</span><br><span class="line">	<span class="keyword">while</span>(p1)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p1-&gt;xh==n)&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			p1=p1-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(p1)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;你要修改的学生信息为：\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学号  姓名      性别  成绩  等级  名次   ##男1女0##\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-10s%-6d%-6d%-6c%-6d\n&quot;</span>,p1-&gt;xh,p1-&gt;xm,p1-&gt;xb,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">	&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;你输入的学号有误！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请选择要修改的数据项：0-不修改 1-姓名 2-性别 3-成绩  &quot;</span>); </span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;re);</span><br><span class="line">	<span class="keyword">while</span>(re&lt;<span class="number">0</span>||re&gt;<span class="number">3</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入有误！重新输入： &quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;re);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">switch</span>(re)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输出新的姓名：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,xm);</span><br><span class="line">			<span class="built_in">strcpy</span>(p1-&gt;xm,xm);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入新的性别：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;xb);</span><br><span class="line">			<span class="keyword">while</span>(p1-&gt;xb!=<span class="number">0</span>&amp;&amp;p1-&gt;xb!=<span class="number">1</span>)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;! ! ! 性别只能是1或0，请重新输入性别1：男    0：女   &quot;</span>);</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;xb); </span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入新的成绩：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;cj);</span><br><span class="line">			<span class="keyword">while</span>(p1-&gt;cj&lt;<span class="number">0</span> || p1-&gt;cj&gt;<span class="number">100</span>)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;! ! ! 成绩范围是0~100，请重新输入成绩   &quot;</span>);</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;cj); </span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">90</span>) p1-&gt;dj=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">80</span>)  p1-&gt;dj=<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">70</span>)  p1-&gt;dj=<span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">60</span>)  p1-&gt;dj=<span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">				<span class="keyword">else</span> p1-&gt;dj=<span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">			<span class="keyword">break</span>;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>**7. DeleteNode 函数 **</p>
<p>函数首部：struct StuLink *DeleteNode(struct StuLink *head)</p>
<p>参数列表：<br>
[1]head：用于表示首节点的地址<br>
[2]p1：用于表示循环查找对应节点的地址<br>
[3]p2：用于表示 p1 指向的节点的前驱节点的地址<br>
[4]del_xh：用于表示被删除学生的学号</p>
<p>返回值：head 的地址</p>
<p>算法描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> StuLink *<span class="title function_">DeleteNode</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span> head;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head,*p2;</span><br><span class="line">	<span class="type">int</span> del_xh;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入要删除的学号：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;del_xh); </span><br><span class="line">	<span class="keyword">while</span>((p1-&gt;xh!=del_xh)&amp;&amp;(p1-&gt;next!=<span class="literal">NULL</span>))&#123;</span><br><span class="line">		p2=p1;p1=p1-&gt;next;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">if</span>(p1-&gt;xh==del_xh)&#123;   <span class="comment">//找到 </span></span><br><span class="line">		<span class="keyword">if</span>(head==p1) head=head-&gt;next;   <span class="comment">//首节点 </span></span><br><span class="line">		<span class="keyword">else</span> p2-&gt;next=p1-&gt;next;         <span class="comment">//非首节点 </span></span><br><span class="line">		<span class="built_in">free</span>(p1); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;删除成功！\n&quot;</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;未找到此学号对应节点！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>); </span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>8. QueryNode 函数</strong></p>
<p>函数首部：void QueryNode(struct StuLink *head)</p>
<p>参数列表：<br>
[1]head：用于表示首节点的地址<br>
[2]query_xh：用于表示查询的学号<br>
[3]p1：用于表示循环查找对应节点的地址<br>
[4]p2：用于表示 p1 指向的节点的前驱节点的地址</p>
<p>返回值：无</p>
<p>实现功能：先判断链表是否为空，为空则退出函数。接收要查询的学号，循环寻找，找到则输出学学 生信息；否则输出未找到</p>
<p>算法描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">QueryNode</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> query_xh;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head,*p2;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入要查询的学生学号：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;query_xh); </span><br><span class="line">	<span class="keyword">while</span>((p1-&gt;xh!=query_xh)&amp;&amp;(p1-&gt;next!=<span class="literal">NULL</span>))&#123;</span><br><span class="line">		p2=p1;p1=p1-&gt;next;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">if</span>(p1-&gt;xh==query_xh)&#123;           <span class="comment">//找到 </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;查找结果为：\n&quot;</span>); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学号:%-5d姓名:%-10s成绩:%-5d等级:%-5c名次:%-5d&quot;</span>,p1-&gt;xh,p1-&gt;xm,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">		<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;性别：男\n&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;性别：女\n&quot;</span>); </span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;未找到该学号对应学生！\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>9. QueryLink 函数</strong></p>
<p>函数首部：void QueryLink(struct StuLink *head)</p>
<p>参数列表：<br>
[1]head：用于表示首节点的地址<br>
[2]p1：用于表示循环链表各节点的地址<br>
[3]n：用于表示循环次数</p>
<p>返回值：无</p>
<p>实现功能：先判断链表是否为空，为空则退出函数。循环查找不及格学习，符合则输出，不符合则下 一个。若一个不及格的都没有，则输出没有不及格学生</p>
<p>算法描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">QueryLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head;</span><br><span class="line">	<span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(p1)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p1-&gt;cj&lt;<span class="number">60</span>)&#123;</span><br><span class="line">			n++; <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;未及格学生信息为：\n&quot;</span>); </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;学号:%-5d姓名:%-10s成绩:%-5d等级:%-5c名次:%-5d&quot;</span>,p1-&gt;xh,p1-&gt;xm,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">			<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;性别：男\n&quot;</span>);</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;性别：女\n&quot;</span>); </span><br><span class="line">		&#125;</span><br><span class="line">		p1=p1-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;没有不及格学生！\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>10. RankLink 函数</strong></p>
<p>函数首部：void RankLink(struct StuLink *head)</p>
<p>参数列表：<br>
[1]head：用于表示首节点的地址<br>
[2]i：用于表示排序的升降序<br>
[3]p1：用于表示循环链表中节点的地址<br>
[4]p2：用于表示 p1 指向的节点的前驱节点的地址<br>
[5]n：用于表示循环次数</p>
<p>返回值：无</p>
<p>实现功能：先判断链表是否为空，为空则退出函数。学生按成绩降序排序，再计算链表中每个结 点的名次，最后保存(学号升序)到文件中。</p>
<p>算法描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">RankLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>&#123;</span><br><span class="line">	<span class="type">int</span> i=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	head=SortLink(head,i);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head,*p2;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> n=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(p1)&#123;</span><br><span class="line">		p1-&gt;mc=n;</span><br><span class="line">		n++;</span><br><span class="line">		<span class="keyword">if</span>((p1!=head)&amp;&amp;((p1-&gt;cj)==(p2-&gt;cj))) p1-&gt;mc=p2-&gt;mc;</span><br><span class="line">		p2=p1;</span><br><span class="line">		p1=p1-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	SaveToFile(head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>11. AnalysisLink 函数</strong></p>
<p>函数首部：void AnalysisLink(struct StuLink *head,int *dj_add)</p>
<p>参数列表：<br>
[1]head：用于表示首节点的地址<br>
[2]dj_add：用于表示各个等级的人数数组<br>
[3]p1：用于表示循环链表中的节点</p>
<p>返回值：无</p>
<p>实现功能：先判断链表是否为空，为空则退出函数。循环各节点，判断成绩且对应等级统计数递增</p>
<p>算法描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AnalysisLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> *dj_add)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head;</span><br><span class="line">	<span class="keyword">while</span>(p1)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">90</span>) dj_add[<span class="number">0</span>]++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">80</span>) dj_add[<span class="number">1</span>]++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">70</span>) dj_add[<span class="number">2</span>]++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">60</span>) dj_add[<span class="number">3</span>]++;</span><br><span class="line">		<span class="keyword">else</span>  dj_add[<span class="number">5</span>]++;</span><br><span class="line">		p1=p1-&gt;next;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>12. OutputLink_1 函数</strong></p>
<p>函数首部：void  OutputLink_1(struct StuLink *head,int i)</p>
<p>参数列表：<br>
[1]head：用于表示首节点的地址<br>
[2]p1：用于表示循环链表节点的地址</p>
<p>返回值：无</p>
<p>实现功能：先判断链表是否为空，为空则退出函数。循环各节点，输出信息</p>
<p>算法描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>  <span class="title function_">OutputLink_1</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	head=SortLink(head,i);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;所有学生信息为：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;学号  姓名      性别 成绩  等级  名次\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(p1)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-10s&quot;</span>,p1-&gt;xh,p1-&gt;xm);</span><br><span class="line">		<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;男    &quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;女    &quot;</span>); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-6c%-6d\n&quot;</span>,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">		p1=p1-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>13. OutputLink_2 函数</strong></p>
<p>函数首部：void  OutputLink_2(struct StuLink *head,int i)</p>
<p>参数列表：<br>
[1]head：用于表示首节点的地址<br>
[2]i：用于表示排序的升降序<br>
[3]sum：用于表示学生总数<br>
[4]n：用于表示当前输出个数<br>
[5]num1：用于表示菜单选择<br>
[6]page_sum：用于表示总页数<br>
[7]page_now：用于表示当前页数<br>
[8]pf_num：用于表示当前输出的个数，控制不超过 10 个</p>
<p>返回值：无</p>
<p>实现功能：先判断链表是否为空，为空则退出函数。先输出第一页，判断总人数，是否有下一页， 无则退出函数，有则继续。接收输入选择功能数字，判断数字时候合理，不合理重新输入。使用 switch 跳到对应功能。1：用上次输出的当前页数*10-20 就等于“上一页”的第一个的学生个数，再用 n 控制 p1 循环到此处进行输出。2：跟着 p1 继续输出。3：输出第一页。4：用(sum/10)*10 就等于最后一页的第一 个学生个数，用 p1 循环到此处，输出即可。</p>
<p>算法描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>  <span class="title function_">OutputLink_2</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	head=SortLink(head,i);</span><br><span class="line"><span class="comment">//	sum:学生总数 n:当前输出个数  </span></span><br><span class="line">	<span class="type">int</span> n=<span class="number">1</span>,num1,sum=<span class="number">0</span>,page_sum,page_now=<span class="number">1</span>,pf_num=<span class="number">0</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head;</span><br><span class="line">	<span class="keyword">while</span>(p1)&#123;</span><br><span class="line">		sum++;</span><br><span class="line">		p1=p1-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	p1=head;</span><br><span class="line">	page_sum=sum/<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;学号  姓名      性别 成绩  等级  名次\n&quot;</span>);</span><br><span class="line">	pf_num=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(p1&amp;&amp;pf_num&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-10s&quot;</span>,p1-&gt;xh,p1-&gt;xm);</span><br><span class="line">		<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;男    &quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;女    &quot;</span>); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-6c%-6d\n&quot;</span>,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">		pf_num++;</span><br><span class="line">		p1=p1-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sum&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n只有一页，暂无上下页功能\n&quot;</span>); </span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>); <span class="keyword">return</span> ;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n          2-下一页  3-首页  4-尾页  5-返回上级\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;            当前第%-2d页，共%-2d页\n&quot;</span>,page_now,page_sum); </span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">		<span class="keyword">while</span>(num1&lt;<span class="number">2</span>||num1&gt;<span class="number">5</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数字: &quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">switch</span>(num1)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				p1=head;</span><br><span class="line">				n=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span>(n&lt;=page_now*<span class="number">10</span><span class="number">-20</span>)&#123;</span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">					n++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;学号  姓名      性别 成绩  等级  名次\n&quot;</span>);</span><br><span class="line">				pf_num=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span>(p1&amp;&amp;pf_num&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-10s&quot;</span>,p1-&gt;xh,p1-&gt;xm);</span><br><span class="line">					<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;男    &quot;</span>);</span><br><span class="line">						<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;女    &quot;</span>); </span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-6c%-6d\n&quot;</span>,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">					pf_num++;</span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">				&#125;</span><br><span class="line">				page_now--;                                          <span class="comment">//当前页数-1</span></span><br><span class="line">				<span class="keyword">if</span>(page_now==<span class="number">1</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n          2-下一页  3-首页  4-尾页  5-返回上级\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;            当前第%-2d页，共%-2d页\n&quot;</span>,page_now,page_sum); </span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					<span class="keyword">while</span>(num1&lt;<span class="number">2</span>||num1&gt;<span class="number">5</span>)&#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数字: &quot;</span>);</span><br><span class="line">						<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n1-上一页  2-下一页  3-首页  4-尾页  5-返回上级\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;            当前第%-2d页，共%-2d页\n&quot;</span>); </span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					<span class="keyword">while</span>(num1&lt;<span class="number">1</span>||num1&gt;<span class="number">4</span>)&#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数字: &quot;</span>);</span><br><span class="line">						<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;学号  姓名      性别 成绩  等级  名次\n&quot;</span>);</span><br><span class="line">				pf_num=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span>(p1&amp;&amp;pf_num&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-10s&quot;</span>,p1-&gt;xh,p1-&gt;xm);</span><br><span class="line">					<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;男    &quot;</span>);</span><br><span class="line">						<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;女    &quot;</span>); </span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-6c%-6d\n&quot;</span>,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">					pf_num++;</span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">				&#125;</span><br><span class="line">				page_now++;                                          <span class="comment">//当前页数+1 </span></span><br><span class="line">				<span class="keyword">if</span>(page_now==page_sum)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n1-上一页            3-首页  4-尾页  5-返回上级\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;            当前第%-2d页，共%-2d页\n&quot;</span>,page_now,page_sum); </span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					<span class="keyword">while</span>(num1&lt;<span class="number">1</span>||num1&gt;<span class="number">5</span>||num1==<span class="number">2</span>)&#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数字: &quot;</span>);</span><br><span class="line">						<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n1-上一页  2-下一页  3-首页  4-尾页  5-返回上级\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;            当前第%-2d页，共%-2d页\n&quot;</span>); </span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					<span class="keyword">while</span>(num1&lt;<span class="number">1</span>||num1&gt;<span class="number">5</span>)&#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数字: &quot;</span>);</span><br><span class="line">						<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				p1=head;</span><br><span class="line">				page_now=<span class="number">1</span>;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;学号  姓名      性别 成绩  等级  名次\n&quot;</span>);</span><br><span class="line">				pf_num=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span>(p1&amp;&amp;pf_num&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-10s&quot;</span>,p1-&gt;xh,p1-&gt;xm);</span><br><span class="line">					<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;男    &quot;</span>);</span><br><span class="line">						<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;女    &quot;</span>); </span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-6c%-6d\n&quot;</span>,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">					pf_num++;</span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n          2-下一页  3-首页  4-尾页  5-返回上级\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;            当前第%-2d页，共%-2d页\n&quot;</span>,page_now,page_sum); </span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">				<span class="keyword">while</span>(num1&lt;<span class="number">2</span>||num1&gt;<span class="number">5</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数字: &quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				p1=head;</span><br><span class="line">				page_now=page_sum;</span><br><span class="line">				n=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span>(n&lt;=(sum/<span class="number">10</span>)*<span class="number">10</span>)&#123;</span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">					n++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;学号  姓名      性别 成绩  等级  名次\n&quot;</span>);</span><br><span class="line">				pf_num=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span>(p1&amp;&amp;pf_num&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-10s&quot;</span>,p1-&gt;xh,p1-&gt;xm);</span><br><span class="line">					<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;男    &quot;</span>);</span><br><span class="line">						<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;女    &quot;</span>); </span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-6c%-6d\n&quot;</span>,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">					pf_num++;</span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n1-上一页            3-首页  4-尾页  5-返回上级\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;            当前第%-2d页，共%-2d页\n&quot;</span>,page_now,page_sum); </span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">				<span class="keyword">while</span>(num1&lt;<span class="number">1</span>||num1&gt;<span class="number">5</span>||num1==<span class="number">2</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数字: &quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(num1==<span class="number">5</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>四、运行界面</h1>
<p><strong>一：主菜单</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemMainMenu.png" alt=""></p>
<p><strong>二：二级菜单——数据维护</strong></p>
<p>![](<a href="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemSecondMenuDatA">https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemSecondMenuDatA</a> maintenance.png)</p>
<ol>
<li>
<p>数据插入</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemDataInsert.png" alt=""></p>
</li>
<li>
<p>数据修改</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemDataModify.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemDataModify-2.png" alt=""></p>
</li>
<li>
<p>数据删除</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemDataDelete.png" alt=""></p>
</li>
</ol>
<p><strong>三：二级菜单——数据查询</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemSecondMenuDataQuery.png" alt=""></p>
<ol>
<li>学号查询</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemStudentNumberQuery.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemStudentNumberQuery-2.png" alt=""></p>
<ol start="2">
<li>不及格学生查询</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemFailStudentQuery.png" alt=""></p>
<p><strong>四：二级菜单——统计分析</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemStatisticalAnalysis.png" alt=""></p>
<ol>
<li>成绩名次计算：无输出</li>
<li>成绩频次分析</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemScoreFrequencyOutput.png" alt=""></p>
<p><strong>五：二级菜单——报表输出</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemSecondMenuDataReportOutput.png" alt=""></p>
<ol>
<li>排序显示学生信息</li>
</ol>
<p>​    学号升序：</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemOutputStudentData-1StuNum.png" alt=""></p>
<p>​	成绩降序：</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemOutputStudentData-1StuAchievement.png" alt=""></p>
<ol start="2">
<li>
<p>分页显示学生信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemOutputStudentData-2-1.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemOutputStudentData-2-2.png" alt=""></p>
</li>
</ol>
<p><strong>六、退出</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/06StudentAchievementManagementSystemexit.png" alt=""></p>
<h1>五、源代码</h1>
<p><em>注意要在同个目录新建一个student.dat文件</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">sex</span>&#123;</span>women,man&#125;; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span>&#123;</span></span><br><span class="line">	<span class="type">int</span>  xh;                   <span class="comment">//学号</span></span><br><span class="line">	<span class="type">char</span> xm[<span class="number">20</span>];               <span class="comment">//姓名 </span></span><br><span class="line">	<span class="class"><span class="keyword">enum</span> <span class="title">sex</span>  <span class="title">xb</span>;</span>              <span class="comment">//性别 </span></span><br><span class="line">	<span class="type">int</span>  cj;                   <span class="comment">//成绩，范围[0,100]    前四个为输入项 </span></span><br><span class="line">	<span class="type">char</span> dj;                   <span class="comment">//等级</span></span><br><span class="line">	<span class="type">int</span>  mc;                   <span class="comment">//名次</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">next</span>;</span>      <span class="comment">//下一项 </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> sex[][<span class="number">3</span>]=&#123;<span class="string">&quot;女&quot;</span>,<span class="string">&quot;男&quot;</span>&#125;;     <span class="comment">//用于输出“男女”中文字符 </span></span><br><span class="line"><span class="type">int</span> size=<span class="keyword">sizeof</span>(<span class="keyword">struct</span> StuLink);  <span class="comment">//节点字节大小 </span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//	声明变量</span></span><br><span class="line">	<span class="type">int</span> menu1,menu2;        <span class="comment">//menu1:一级菜单 menu2:二级菜单  </span></span><br><span class="line">	<span class="type">int</span> i=<span class="number">0</span>,n,dj_add[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">head</span>=</span><span class="literal">NULL</span>,*pw;   <span class="comment">//*head:学生信息链表头指针 pw:尾节点 </span></span><br><span class="line">	</span><br><span class="line"><span class="comment">//  声明函数</span></span><br><span class="line"><span class="comment">// 从数据文件中逐行读取学生信息生成学生链表,返回头指针 </span></span><br><span class="line">	<span class="keyword">struct</span> StuLink *<span class="title function_">ReadFromFile</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//	先将学生链表按学号升序排序，再将学生链表中的数据逐行保存到数据文件</span></span><br><span class="line">	<span class="type">void</span> <span class="title function_">SaveToFile</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>;</span><br><span class="line"><span class="comment">//	SortLink函数：按指定数据项的顺序【1:学号（升序）】或者【2:成绩（降序）】对学生链表进行排序 </span></span><br><span class="line">	<span class="keyword">struct</span> StuLink *<span class="title function_">SortLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> i)</span>; </span><br><span class="line"><span class="comment">//	InsertNode函数：在链表尾插入一个新结点。新结点的学号是链表中最大学号加1，姓名和成绩从键盘输入</span></span><br><span class="line"><span class="comment">//	（注意：成绩必须在[0,100]区间的整数），根据成绩计算等级。</span></span><br><span class="line"><span class="comment">//	注意：插入结点会导致链表中各结点名次的变化。</span></span><br><span class="line">	<span class="keyword">struct</span> StuLink *<span class="title function_">InsertNode</span><span class="params">(<span class="keyword">struct</span> StuLink *pw)</span>;</span><br><span class="line"><span class="comment">//	EditNode函数：修改链表中指定学号的结点（学号不能修改，成绩必须在[0,100]区间的整数）</span></span><br><span class="line"><span class="comment">//	注意：当修改成绩时会导致等级和名次的变化</span></span><br><span class="line">	<span class="type">void</span> <span class="title function_">EditNode</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>; </span><br><span class="line"><span class="comment">//DeleteNode函数：删除链表中指定学号的结点。注意：删除结点会导致链表中各结点名次的变化</span></span><br><span class="line">	<span class="keyword">struct</span> StuLink *<span class="title function_">DeleteNode</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>;</span><br><span class="line"><span class="comment">//	QueryNode函数：查询链表中指定学号的结点，并显示查询结果。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QueryNode</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>;</span><br><span class="line"><span class="comment">//	QueryLink函数：查询链表中不及格的所有结点，并显示查询结果。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QueryLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>;</span><br><span class="line"><span class="comment">//RankLink函数：计算链表中每个结点的名次。名次规则：按成绩降序排名，从第1名开始依次排名，</span></span><br><span class="line"><span class="comment">//若出现并列名次，则名次需要叠加。例如，若出现5个并列第1名，则没有第2名，下一个名次是第6名，依此类推。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RankLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>;</span><br><span class="line"><span class="comment">//AnalysisLink函数：统计并返回各等级人数。等级标准：</span></span><br><span class="line"><span class="comment">//A：90及以上		B：80及以上		C：70及以上		D：60及以上		E：60以下</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">AnalysisLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> *dj_add)</span>;</span><br><span class="line"><span class="comment">//OutputLink_1函数：按指定数据项的顺序【1:学号（升序）】或者【2:成绩（降序）】输出学生成绩表、各等级人数。</span></span><br><span class="line"><span class="comment">//学生成绩表每行输出一个学生信息（依次为学号、姓名、性别、成绩、等级和名次，各项间以1个空格隔开），</span></span><br><span class="line"><span class="comment">//各等级人数分行输出。</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">OutputLink_1</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> i)</span>;</span><br><span class="line"><span class="comment">//OutputLink_2函数：分页显示全部学生的信息。</span></span><br><span class="line"><span class="comment">//分页功能：每页显示10个学生信息，有上一页、下一页、首页和最后一页的翻页功能。</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">OutputLink_2</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> i)</span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	执行语句</span></span><br><span class="line">	head=ReadFromFile();     <span class="comment">//读取文件到链表，获取头指针 </span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	菜单</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		system(<span class="string">&quot;cls&quot;</span>);                  <span class="comment">//清控制台，Windows </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);<span class="comment">//40个=</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=           学生成绩管理程序           =\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=                              by：xxx =\n&quot;</span>); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=        1-数据维护  2-数据查询        =\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=        3-统计分析  4-报表输出        =\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=                0-退出                =\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line"><span class="comment">//		printf(&quot;\n&quot;);</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu1); </span><br><span class="line">		<span class="keyword">switch</span>(menu1)&#123;                 <span class="comment">//一级菜单 </span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				<span class="keyword">while</span>(<span class="number">1</span>)&#123;                      <span class="comment">//循环输出二级菜单 </span></span><br><span class="line">					system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=        1-数据插入  2-数据修改        =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=        3-数据删除  0-返回上级        =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu2); </span><br><span class="line">					<span class="keyword">switch</span>(menu2)&#123;      <span class="comment">//二级菜单 </span></span><br><span class="line">						<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的学生个数(n&gt;0): &quot;</span>); </span><br><span class="line">							<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">							<span class="keyword">while</span>(n&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">								<span class="built_in">printf</span>(<span class="string">&quot;！！！请输入正确的学生个数！！！： &quot;</span>);</span><br><span class="line">								<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">							&#125;</span><br><span class="line">							pw=head;</span><br><span class="line">							<span class="keyword">if</span>(pw)&#123;</span><br><span class="line">								<span class="keyword">while</span>(pw-&gt;next)   <span class="comment">//获取尾部节点 </span></span><br><span class="line">									pw=pw-&gt;next;</span><br><span class="line">							&#125;</span><br><span class="line">							</span><br><span class="line">							<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">								pw=InsertNode(pw);</span><br><span class="line">								<span class="keyword">if</span>(head==<span class="literal">NULL</span>) head=pw;</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="comment">//	计算名次</span></span><br><span class="line">							RankLink(head);</span><br><span class="line"><span class="comment">//							SaveToFile(head);		</span></span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">							EditNode(head);</span><br><span class="line">							<span class="comment">//	计算名次</span></span><br><span class="line">							RankLink(head);</span><br><span class="line"><span class="comment">//							SaveToFile(head);</span></span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">							head=DeleteNode(head);</span><br><span class="line">							<span class="comment">//	计算名次</span></span><br><span class="line">							RankLink(head);</span><br><span class="line"><span class="comment">//							SaveToFile(head);	</span></span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(menu2==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				<span class="keyword">while</span>(<span class="number">1</span>)&#123;                      <span class="comment">//循环输出二级菜单 </span></span><br><span class="line">					system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=1-学号查询 2-不及格学生查询 0-返回上级=\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu2); </span><br><span class="line">					<span class="keyword">switch</span>(menu2)&#123;      <span class="comment">//二级菜单 </span></span><br><span class="line">						<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">							QueryNode(head);</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">							QueryLink(head); </span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(menu2==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				<span class="keyword">while</span>(<span class="number">1</span>)&#123;                      <span class="comment">//循环输出二级菜单 </span></span><br><span class="line">					system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=    1-成绩名次计算  2-成绩频次分析    =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=              0-返回上级              =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu2); </span><br><span class="line">					<span class="keyword">switch</span>(menu2)&#123;      <span class="comment">//二级菜单 </span></span><br><span class="line">						<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">							RankLink(head);</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">							AnalysisLink(head,dj_add);</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;&#x27;A&#x27;有%d人；&#x27;B&#x27;有%d人，&#x27;C&#x27;有%d人，&#x27;D&#x27;有%d人，&#x27;E&#x27;有%d人，共有%d人\n&quot;</span>,</span><br><span class="line">							dj_add[<span class="number">0</span>],dj_add[<span class="number">1</span>],dj_add[<span class="number">2</span>],dj_add[<span class="number">3</span>],dj_add[<span class="number">4</span>],dj_add[<span class="number">0</span>]+dj_add[<span class="number">1</span>]+dj_add[<span class="number">2</span>]+dj_add[<span class="number">3</span>]+dj_add[<span class="number">4</span>]); </span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>); </span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(menu2==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				<span class="keyword">while</span>(<span class="number">1</span>)&#123;                      <span class="comment">//循环输出二级菜单 </span></span><br><span class="line">					system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=1-排序显示学生信息  2-分页显示学生信息=\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=              0-返回上级              =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;menu2); </span><br><span class="line">					<span class="keyword">switch</span>(menu2)&#123;      <span class="comment">//二级菜单 </span></span><br><span class="line">						<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;请选择按【1:学号（升序）】或者【2:成绩（降序）】输出学生成绩表：&quot;</span>);</span><br><span class="line">							<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">							<span class="keyword">while</span>((i!=<span class="number">1</span>)&amp;&amp;(i!=<span class="number">2</span>))&#123;</span><br><span class="line">								<span class="built_in">printf</span>(<span class="string">&quot;！！！请选择正确选项！！！1 or 2 ： &quot;</span>);</span><br><span class="line">								<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">							&#125;</span><br><span class="line">							OutputLink_1(head,i);</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">							system(<span class="string">&quot;pause&quot;</span>); </span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;请选择按【1:学号（升序）】或者【2:成绩（降序）】输出学生成绩表：&quot;</span>);</span><br><span class="line">							<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">							<span class="keyword">while</span>((i!=<span class="number">1</span>)&amp;&amp;(i!=<span class="number">2</span>))&#123;</span><br><span class="line">								<span class="built_in">printf</span>(<span class="string">&quot;！！！请选择正确选项！！！1 or 2 ： &quot;</span>);</span><br><span class="line">								<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">							&#125;</span><br><span class="line">							OutputLink_2(head,i);</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(menu2==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;=        你已经退出学生管理系统        =\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;=                                      =\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;========================================\n&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span>;       <span class="comment">//退出main函数 </span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//  自 定 义 函 数 </span></span><br><span class="line"><span class="comment">// 从数据文件中逐行读取学生信息生成学生链表,返回头指针 </span></span><br><span class="line"><span class="keyword">struct</span> StuLink *<span class="title function_">ReadFromFile</span><span class="params">()</span>&#123;</span><br><span class="line">	FILE *fp;                           <span class="comment">//指向student.dat文件 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>,*<span class="title">p2</span>,*<span class="title">head</span>=</span><span class="literal">NULL</span>;  <span class="comment">//head：头节点  p1：开辟新节点  p2：尾节点 </span></span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>((fp=fopen(<span class="string">&quot;student.dat&quot;</span>,<span class="string">&quot;r&quot;</span>))==<span class="literal">NULL</span>)&#123;   <span class="comment">//读开student.dat </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;打开student.dat失败\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">	&#125; </span><br><span class="line">	ch=fgetc(fp);                               <span class="comment">//读取文件第一个字符</span></span><br><span class="line">	<span class="keyword">if</span>(ch==EOF)&#123;                                <span class="comment">//EOF文件终止符</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;文件为空\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> head;	</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		rewind(fp);                            <span class="comment">// 将fp的地址重置为文件开头</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(!feof(fp))&#123;</span><br><span class="line">		<span class="keyword">if</span>((p1=(<span class="keyword">struct</span> StuLink *)<span class="built_in">malloc</span>(size))==<span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;不能成功分配储存块&quot;</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		p1-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">if</span>(head==<span class="literal">NULL</span>)  head=p1;        <span class="comment">//首节点 </span></span><br><span class="line">			<span class="keyword">else</span> p2-&gt;next=p1;     <span class="comment">//非首节点，表尾插入新节点 </span></span><br><span class="line">		p2=p1;                    <span class="comment">// p2指向新的表尾结点 </span></span><br><span class="line">		<span class="built_in">fscanf</span>(fp,<span class="string">&quot;%d %s %d %d %s %d\n&quot;</span>,&amp;p1-&gt;xh,p1-&gt;xm,&amp;p1-&gt;xb,&amp;p1-&gt;cj,&amp;p1-&gt;dj,&amp;p1-&gt;mc);</span><br><span class="line"><span class="comment">//		读取\n是防止fp以为文件未完 </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-5d%-10s%-5d%-5d%-5c%-5d\n&quot;</span>,p1-&gt;xh,p1-&gt;xm,p1-&gt;xb,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);                                 <span class="comment">//关闭student.dat</span></span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//	SortLink函数：按指定数据项的顺序【1:学号（升序）】或者【2:成绩（降序）】对学生链表进行排序</span></span><br><span class="line">	<span class="keyword">struct</span> StuLink *<span class="title function_">SortLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(head==<span class="literal">NULL</span>)<span class="keyword">return</span> head;</span><br><span class="line"><span class="comment">//		使用交换数据的形式交换两个节点 </span></span><br><span class="line">		<span class="type">int</span> xh,xb,cj,mc;</span><br><span class="line">		<span class="type">char</span> xm[<span class="number">20</span>],dj;</span><br><span class="line"><span class="comment">//		p1:被比较节点  p2:比较节点  p3:快速排序储存节点 </span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head,*p2=head-&gt;next,*p3=p1;</span><br><span class="line">		<span class="keyword">switch</span>(i)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//				快速排序</span></span><br><span class="line">				<span class="keyword">while</span>(p1-&gt;next)&#123;</span><br><span class="line">					p2=p1-&gt;next;</span><br><span class="line">					p3=p1;</span><br><span class="line">					<span class="keyword">while</span>(p2)&#123;</span><br><span class="line">						<span class="keyword">if</span>(p3-&gt;xh&gt;p2-&gt;xh) </span><br><span class="line">							p3=p2;</span><br><span class="line">						p2=p2-&gt;next;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(p3-&gt;xh&lt;p1-&gt;xh)&#123;</span><br><span class="line">						xh=p3-&gt;xh;  xb=p3-&gt;xb;</span><br><span class="line">						cj=p3-&gt;cj;  mc=p3-&gt;mc;</span><br><span class="line">						<span class="built_in">strcpy</span>(xm,p3-&gt;xm);  dj=p3-&gt;dj;</span><br><span class="line">						p3-&gt;xh=p1-&gt;xh;  p3-&gt;xb=p1-&gt;xb;</span><br><span class="line">						p3-&gt;cj=p1-&gt;cj;  p3-&gt;mc=p1-&gt;mc;</span><br><span class="line">						<span class="built_in">strcpy</span>(p3-&gt;xm,p1-&gt;xm);  p3-&gt;dj=p1-&gt;dj;</span><br><span class="line">						p1-&gt;xh=xh;  p1-&gt;xb=xb;</span><br><span class="line">						p1-&gt;cj=cj;  p1-&gt;mc=mc;</span><br><span class="line">						<span class="built_in">strcpy</span>(p1-&gt;xm,xm);  p1-&gt;dj=dj;</span><br><span class="line">					&#125; </span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">				&#125; </span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">//				快速排序</span></span><br><span class="line">				<span class="keyword">while</span>(p1-&gt;next)&#123;</span><br><span class="line">					p2=p1-&gt;next;</span><br><span class="line">					p3=p1;</span><br><span class="line">					<span class="keyword">while</span>(p2)&#123;</span><br><span class="line">						<span class="keyword">if</span>(p3-&gt;cj&lt;p2-&gt;cj) </span><br><span class="line">							p3=p2;</span><br><span class="line">						p2=p2-&gt;next;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(p3-&gt;cj&gt;p1-&gt;cj)&#123;</span><br><span class="line">						xh=p3-&gt;xh;  xb=p3-&gt;xb;</span><br><span class="line">						cj=p3-&gt;cj;  mc=p3-&gt;mc;</span><br><span class="line">						<span class="built_in">strcpy</span>(xm,p3-&gt;xm);  dj=p3-&gt;dj;</span><br><span class="line">						p3-&gt;xh=p1-&gt;xh;  p3-&gt;xb=p1-&gt;xb;</span><br><span class="line">						p3-&gt;cj=p1-&gt;cj;  p3-&gt;mc=p1-&gt;mc;</span><br><span class="line">						<span class="built_in">strcpy</span>(p3-&gt;xm,p1-&gt;xm);  p3-&gt;dj=p1-&gt;dj;</span><br><span class="line">						p1-&gt;xh=xh;  p1-&gt;xb=xb;</span><br><span class="line">						p1-&gt;cj=cj;  p1-&gt;mc=mc;</span><br><span class="line">						<span class="built_in">strcpy</span>(p1-&gt;xm,xm);  p1-&gt;dj=dj;</span><br><span class="line">					&#125; </span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">				&#125; </span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">return</span> head;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//	先将学生链表按学号升序排序，再将学生链表中的数据逐行保存到数据文件</span></span><br><span class="line">	<span class="type">void</span> <span class="title function_">SaveToFile</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>&#123;</span><br><span class="line">		FILE *fp;</span><br><span class="line">		<span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">		head=SortLink(head,i);</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p</span>=</span>head;</span><br><span class="line">		<span class="keyword">if</span>((fp=fopen(<span class="string">&quot;student.dat&quot;</span>,<span class="string">&quot;w&quot;</span>))==<span class="literal">NULL</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;写开文件失败！&quot;</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="comment">//			写入文件 </span></span><br><span class="line">			<span class="built_in">fprintf</span>(fp,<span class="string">&quot;%d %s %d %d %c %d\n&quot;</span>,p-&gt;xh,p-&gt;xm,p-&gt;xb,p-&gt;cj,p-&gt;dj,p-&gt;mc);</span><br><span class="line">			p=p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		fclose(fp); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	InsertNode函数：在链表尾插入一个新结点。新结点的学号是链表中最大学号加1，姓名和成绩从键盘输入</span></span><br><span class="line"><span class="comment">//	（注意：成绩必须在[0,100]区间的整数），根据成绩计算等级。</span></span><br><span class="line"><span class="comment">//	注意：插入结点会导致链表中各结点名次的变化。</span></span><br><span class="line"><span class="keyword">struct</span> StuLink *<span class="title function_">InsertNode</span><span class="params">(<span class="keyword">struct</span> StuLink *pw)</span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>;</span>    <span class="comment">//pw:原链表尾节点	 p1:开辟新节点 </span></span><br><span class="line">	<span class="keyword">if</span>((p1=(<span class="keyword">struct</span> StuLink *)<span class="built_in">malloc</span>(size))==<span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;不能成功分配储存块\n&quot;</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	p1-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span>(pw)</span><br><span class="line">		p1-&gt;xh=pw-&gt;xh+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		p1-&gt;xh=<span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> xm[<span class="number">20</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请依次输入姓名、性别(男1女0)、成绩[0,100]：  &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>,xm,&amp;p1-&gt;xb,&amp;p1-&gt;cj);</span><br><span class="line">	<span class="keyword">while</span>(p1-&gt;xb!=<span class="number">0</span>&amp;&amp;p1-&gt;xb!=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;! ! ! 性别只能是1或0，请重新输入性别1：男    0：女   &quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;xb); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(p1-&gt;cj&lt;<span class="number">0</span> || p1-&gt;cj&gt;<span class="number">100</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;! ! ! 成绩范围是0~100，请重新输入成绩   &quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;cj); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">strcpy</span>(p1-&gt;xm,xm);</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	p1-&gt;mc=1;  // 名次暂时命名为1 </span></span><br><span class="line">	<span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">90</span>) p1-&gt;dj=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">80</span>)  p1-&gt;dj=<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">70</span>)  p1-&gt;dj=<span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">60</span>)  p1-&gt;dj=<span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span> p1-&gt;dj=<span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span>(pw==<span class="literal">NULL</span>)	pw=p1;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		pw-&gt;next=p1;	</span><br><span class="line">		pw=pw-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> pw;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//	EditNode函数：修改链表中指定学号的结点（学号不能修改，成绩必须在[0,100]区间的整数）</span></span><br><span class="line"><span class="comment">//	注意：当修改成绩时会导致等级和名次的变化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EditNode</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head;</span><br><span class="line">	<span class="type">char</span> xm[<span class="number">20</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> n,re;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入你要修改的学生信息的学号：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n) ;</span><br><span class="line">	<span class="keyword">while</span>(p1)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p1-&gt;xh==n)&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			p1=p1-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(p1)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;你要修改的学生信息为：\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学号  姓名      性别  成绩  等级  名次   ##男1女0##\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-10s%-6d%-6d%-6c%-6d\n&quot;</span>,p1-&gt;xh,p1-&gt;xm,p1-&gt;xb,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">	&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;你输入的学号有误！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请选择要修改的数据项：0-不修改 1-姓名 2-性别 3-成绩  &quot;</span>); </span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;re);</span><br><span class="line">	<span class="keyword">while</span>(re&lt;<span class="number">0</span>||re&gt;<span class="number">3</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入有误！重新输入： &quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;re);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">switch</span>(re)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输出新的姓名：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,xm);</span><br><span class="line">			<span class="built_in">strcpy</span>(p1-&gt;xm,xm);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入新的性别：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;xb);</span><br><span class="line">			<span class="keyword">while</span>(p1-&gt;xb!=<span class="number">0</span>&amp;&amp;p1-&gt;xb!=<span class="number">1</span>)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;! ! ! 性别只能是1或0，请重新输入性别1：男    0：女   &quot;</span>);</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;xb); </span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入新的成绩：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;cj);</span><br><span class="line">			<span class="keyword">while</span>(p1-&gt;cj&lt;<span class="number">0</span> || p1-&gt;cj&gt;<span class="number">100</span>)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;! ! ! 成绩范围是0~100，请重新输入成绩   &quot;</span>);</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;cj); </span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">90</span>) p1-&gt;dj=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">80</span>)  p1-&gt;dj=<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">70</span>)  p1-&gt;dj=<span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">60</span>)  p1-&gt;dj=<span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">				<span class="keyword">else</span> p1-&gt;dj=<span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">			<span class="keyword">break</span>;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DeleteNode函数：删除链表中指定学号的结点。注意：删除结点会导致链表中各结点名次的变化</span></span><br><span class="line"><span class="keyword">struct</span> StuLink *<span class="title function_">DeleteNode</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span> head;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head,*p2;</span><br><span class="line">	<span class="type">int</span> del_xh;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入要删除的学号：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;del_xh); </span><br><span class="line">	<span class="keyword">while</span>((p1-&gt;xh!=del_xh)&amp;&amp;(p1-&gt;next!=<span class="literal">NULL</span>))&#123;</span><br><span class="line">		p2=p1;p1=p1-&gt;next;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">if</span>(p1-&gt;xh==del_xh)&#123;   <span class="comment">//找到 </span></span><br><span class="line">		<span class="keyword">if</span>(head==p1) head=head-&gt;next;   <span class="comment">//首节点 </span></span><br><span class="line">		<span class="keyword">else</span> p2-&gt;next=p1-&gt;next;         <span class="comment">//非首节点 </span></span><br><span class="line">		<span class="built_in">free</span>(p1); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;删除成功！\n&quot;</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;未找到此学号对应节点！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>); </span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//	QueryNode函数：查询链表中指定学号的结点，并显示查询结果。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QueryNode</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> query_xh;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head,*p2;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入要查询的学生学号：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;query_xh); </span><br><span class="line">	<span class="keyword">while</span>((p1-&gt;xh!=query_xh)&amp;&amp;(p1-&gt;next!=<span class="literal">NULL</span>))&#123;</span><br><span class="line">		p2=p1;p1=p1-&gt;next;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">if</span>(p1-&gt;xh==query_xh)&#123;           <span class="comment">//找到 </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;查找结果为：\n&quot;</span>); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学号:%-5d姓名:%-10s成绩:%-5d等级:%-5c名次:%-5d&quot;</span>,p1-&gt;xh,p1-&gt;xm,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">		<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;性别：男\n&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;性别：女\n&quot;</span>); </span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;未找到该学号对应学生！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//	QueryLink函数：查询链表中不及格的所有结点，并显示查询结果。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QueryLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head;</span><br><span class="line">	<span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(p1)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p1-&gt;cj&lt;<span class="number">60</span>)&#123;</span><br><span class="line">			n++; <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;未及格学生信息为：\n&quot;</span>); </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;学号:%-5d姓名:%-10s成绩:%-5d等级:%-5c名次:%-5d&quot;</span>,p1-&gt;xh,p1-&gt;xm,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">			<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;性别：男\n&quot;</span>);</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;性别：女\n&quot;</span>); </span><br><span class="line">		&#125;</span><br><span class="line">		p1=p1-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;没有不及格学生！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RankLink函数：计算链表中每个结点的名次。名次规则：按成绩降序排名，从第1名开始依次排名，</span></span><br><span class="line"><span class="comment">//若出现并列名次，则名次需要叠加。例如，若出现5个并列第1名，则没有第2名，下一个名次是第6名，依此类推。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RankLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head)</span>&#123;</span><br><span class="line">	<span class="type">int</span> i=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	head=SortLink(head,i);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head,*p2;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> n=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(p1)&#123;</span><br><span class="line">		p1-&gt;mc=n;</span><br><span class="line">		n++;</span><br><span class="line">		<span class="keyword">if</span>((p1!=head)&amp;&amp;((p1-&gt;cj)==(p2-&gt;cj))) p1-&gt;mc=p2-&gt;mc;</span><br><span class="line">		p2=p1;</span><br><span class="line">		p1=p1-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	SaveToFile(head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AnalysisLink函数：统计并返回各等级人数。等级标准：</span></span><br><span class="line"><span class="comment">//A：90及以上		B：80及以上		C：70及以上		D：60及以上		E：60以下</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">AnalysisLink</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> *dj_add)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head;</span><br><span class="line">	<span class="keyword">while</span>(p1)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">90</span>) dj_add[<span class="number">0</span>]++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">80</span>) dj_add[<span class="number">1</span>]++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">70</span>) dj_add[<span class="number">2</span>]++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;cj&gt;=<span class="number">60</span>) dj_add[<span class="number">3</span>]++;</span><br><span class="line">		<span class="keyword">else</span>  dj_add[<span class="number">5</span>]++;</span><br><span class="line">		p1=p1-&gt;next;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//OutputLink_1函数：按指定数据项的顺序【1:学号（升序）】或者【2:成绩（降序）】输出学生成绩表、各等级人数。</span></span><br><span class="line"><span class="comment">//学生成绩表每行输出一个学生信息（依次为学号、姓名、性别、成绩、等级和名次，各项间以1个空格隔开），</span></span><br><span class="line"><span class="comment">//各等级人数分行输出。</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">OutputLink_1</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	head=SortLink(head,i);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;所有学生信息为：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;学号  姓名      性别 成绩  等级  名次\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(p1)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-10s&quot;</span>,p1-&gt;xh,p1-&gt;xm);</span><br><span class="line">		<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;男    &quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;女    &quot;</span>); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-6c%-6d\n&quot;</span>,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">		p1=p1-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//OutputLink_2函数：分页显示全部学生的信息。</span></span><br><span class="line"><span class="comment">//分页功能：每页显示10个学生信息，有上一页、下一页、首页和最后一页的翻页功能。</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">OutputLink_2</span><span class="params">(<span class="keyword">struct</span> StuLink *head,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;学生数据为空！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); system(<span class="string">&quot;pause&quot;</span>);	</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	head=SortLink(head,i);</span><br><span class="line"><span class="comment">//	sum:学生总数 n:当前输出个数  </span></span><br><span class="line">	<span class="type">int</span> n=<span class="number">1</span>,num1,sum=<span class="number">0</span>,page_sum,page_now=<span class="number">1</span>,pf_num=<span class="number">0</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StuLink</span> *<span class="title">p1</span>=</span>head;</span><br><span class="line">	<span class="keyword">while</span>(p1)&#123;</span><br><span class="line">		sum++;</span><br><span class="line">		p1=p1-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	p1=head;</span><br><span class="line">	page_sum=sum/<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;学号  姓名      性别 成绩  等级  名次\n&quot;</span>);</span><br><span class="line">	pf_num=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(p1&amp;&amp;pf_num&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-10s&quot;</span>,p1-&gt;xh,p1-&gt;xm);</span><br><span class="line">		<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;男    &quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;女    &quot;</span>); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-6c%-6d\n&quot;</span>,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">		pf_num++;</span><br><span class="line">		p1=p1-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sum&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n只有一页，暂无上下页功能\n&quot;</span>); </span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>); <span class="keyword">return</span> ;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n          2-下一页  3-首页  4-尾页  5-返回上级\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;            当前第%-2d页，共%-2d页\n&quot;</span>,page_now,page_sum); </span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">		<span class="keyword">while</span>(num1&lt;<span class="number">2</span>||num1&gt;<span class="number">5</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数字: &quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">switch</span>(num1)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				p1=head;</span><br><span class="line">				n=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span>(n&lt;=page_now*<span class="number">10</span><span class="number">-20</span>)&#123;</span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">					n++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;学号  姓名      性别 成绩  等级  名次\n&quot;</span>);</span><br><span class="line">				pf_num=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span>(p1&amp;&amp;pf_num&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-10s&quot;</span>,p1-&gt;xh,p1-&gt;xm);</span><br><span class="line">					<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;男    &quot;</span>);</span><br><span class="line">						<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;女    &quot;</span>); </span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-6c%-6d\n&quot;</span>,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">					pf_num++;</span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">				&#125;</span><br><span class="line">				page_now--;                                          <span class="comment">//当前页数-1</span></span><br><span class="line">				<span class="keyword">if</span>(page_now==<span class="number">1</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n          2-下一页  3-首页  4-尾页  5-返回上级\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;            当前第%-2d页，共%-2d页\n&quot;</span>,page_now,page_sum); </span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					<span class="keyword">while</span>(num1&lt;<span class="number">2</span>||num1&gt;<span class="number">5</span>)&#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数字: &quot;</span>);</span><br><span class="line">						<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n1-上一页  2-下一页  3-首页  4-尾页  5-返回上级\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;            当前第%-2d页，共%-2d页\n&quot;</span>); </span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					<span class="keyword">while</span>(num1&lt;<span class="number">1</span>||num1&gt;<span class="number">4</span>)&#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数字: &quot;</span>);</span><br><span class="line">						<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;学号  姓名      性别 成绩  等级  名次\n&quot;</span>);</span><br><span class="line">				pf_num=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span>(p1&amp;&amp;pf_num&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-10s&quot;</span>,p1-&gt;xh,p1-&gt;xm);</span><br><span class="line">					<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;男    &quot;</span>);</span><br><span class="line">						<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;女    &quot;</span>); </span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-6c%-6d\n&quot;</span>,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">					pf_num++;</span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">				&#125;</span><br><span class="line">				page_now++;                                          <span class="comment">//当前页数+1 </span></span><br><span class="line">				<span class="keyword">if</span>(page_now==page_sum)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n1-上一页            3-首页  4-尾页  5-返回上级\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;            当前第%-2d页，共%-2d页\n&quot;</span>,page_now,page_sum); </span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					<span class="keyword">while</span>(num1&lt;<span class="number">1</span>||num1&gt;<span class="number">5</span>||num1==<span class="number">2</span>)&#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数字: &quot;</span>);</span><br><span class="line">						<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n1-上一页  2-下一页  3-首页  4-尾页  5-返回上级\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;            当前第%-2d页，共%-2d页\n&quot;</span>); </span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					<span class="keyword">while</span>(num1&lt;<span class="number">1</span>||num1&gt;<span class="number">5</span>)&#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数字: &quot;</span>);</span><br><span class="line">						<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				p1=head;</span><br><span class="line">				page_now=<span class="number">1</span>;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;学号  姓名      性别 成绩  等级  名次\n&quot;</span>);</span><br><span class="line">				pf_num=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span>(p1&amp;&amp;pf_num&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-10s&quot;</span>,p1-&gt;xh,p1-&gt;xm);</span><br><span class="line">					<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;男    &quot;</span>);</span><br><span class="line">						<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;女    &quot;</span>); </span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-6c%-6d\n&quot;</span>,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">					pf_num++;</span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n          2-下一页  3-首页  4-尾页  5-返回上级\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;            当前第%-2d页，共%-2d页\n&quot;</span>,page_now,page_sum); </span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">				<span class="keyword">while</span>(num1&lt;<span class="number">2</span>||num1&gt;<span class="number">5</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数字: &quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				p1=head;</span><br><span class="line">				page_now=page_sum;</span><br><span class="line">				n=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span>(n&lt;=(sum/<span class="number">10</span>)*<span class="number">10</span>)&#123;</span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">					n++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;学号  姓名      性别 成绩  等级  名次\n&quot;</span>);</span><br><span class="line">				pf_num=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span>(p1&amp;&amp;pf_num&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-10s&quot;</span>,p1-&gt;xh,p1-&gt;xm);</span><br><span class="line">					<span class="keyword">if</span>(p1-&gt;xb==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;男    &quot;</span>);</span><br><span class="line">						<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;女    &quot;</span>); </span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%-6d%-6c%-6d\n&quot;</span>,p1-&gt;cj,p1-&gt;dj,p1-&gt;mc);</span><br><span class="line">					pf_num++;</span><br><span class="line">					p1=p1-&gt;next;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n1-上一页            3-首页  4-尾页  5-返回上级\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;            当前第%-2d页，共%-2d页\n&quot;</span>,page_now,page_sum); </span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">				<span class="keyword">while</span>(num1&lt;<span class="number">1</span>||num1&gt;<span class="number">5</span>||num1==<span class="number">2</span>)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数字: &quot;</span>);</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(num1==<span class="number">5</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Git学习笔记/Git不完全个人使用指南</title>
    <url>/2021/GitAndStudyNotes.html</url>
    <content><![CDATA[<p>学习Git的笔记，做个记录</p>
<p><em><strong>资料比我写的更好</strong></em></p>
<span id="more"></span>
<h1>git简介</h1>
<h2 id="git是什么">git是什么</h2>
<p>git是版本控制工具</p>
<h2 id="git结构">git结构</h2>
<p><strong>远程库</strong>(代码托管平台)、<strong>本地库</strong>(历史版本)、<strong>暂存区</strong>(临时存储)、<strong>工作区</strong>(写代码)</p>
<p>工作区 --git add–&gt; 暂存区 --git commit–&gt; 本地库 --git push–&gt;远程库</p>
<h1>开始使用git</h1>
<h2 id="本地库初始化">本地库初始化</h2>
<p><code>git init</code></p>
<p>得到一个 <code>.git</code> 文件夹，存放的是本地库相关的子目录和文件，不要删除也不要乱修改</p>
<h2 id="设置签名">设置签名</h2>
<h3 id="形式">形式</h3>
<blockquote>
<p>用户名：tom</p>
<p>email地址：goodMorning@qq.com</p>
</blockquote>
<h3 id="作用">作用</h3>
<p>区分不用的开发人员</p>
<h3 id="注意">注意</h3>
<p>这里设置的签名和登录远程库（如github）的账号、密码没有任何关系，即用户名和email可以是虚假的</p>
<h3 id="命令">命令</h3>
<h4 id="项目级别-仓库级别">项目级别/仓库级别</h4>
<p>仅在当前本地库范围内有效</p>
<p><code>git config</code></p>
<p>例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config user.name tom</span><br><span class="line">git config user.email goodMorning@qq.com</span><br></pre></td></tr></table></figure>
<p>信息存放在 <code>.git/config</code> 文件下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   master  <span class="built_in">cat</span> .git/config</span>   </span><br><span class="line">[core]</span><br><span class="line">	repositoryformatversion = 0</span><br><span class="line">	filemode = true</span><br><span class="line">	bare = false</span><br><span class="line">	logallrefupdates = true</span><br><span class="line">	ignorecase = true</span><br><span class="line">	precomposeunicode = true</span><br><span class="line">[user]</span><br><span class="line">	name = tom</span><br><span class="line">	email = goodMorning@qq.com</span><br></pre></td></tr></table></figure>
<h4 id="系统用户级别（推荐）">系统用户级别（推荐）</h4>
<p>电脑系统（当前登录的用户）的git签名：登录当前操作系统的用户范围</p>
<p><code>git config --global</code></p>
<p>例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name tom_glb</span><br><span class="line">git config --global user.email goodMorning_glb@qq.com</span><br></pre></td></tr></table></figure>
<p>信息存放在 <code>～/.gitconfig</code> 文件下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~ <span class="built_in">cat</span> .gitconfig</span> </span><br><span class="line">[user]</span><br><span class="line">	email = goodMorning_glb@qq.com</span><br><span class="line">	name = tom_glb</span><br></pre></td></tr></table></figure>
<h4 id="优先级">优先级</h4>
<p>项目 &gt; 系统用户级别</p>
<h4 id="注意-2">注意</h4>
<p>两种都没有会报错</p>
<h2 id="查看状态">查看状态</h2>
<p><code>git status</code></p>
<h3 id="功能">功能</h3>
<p>查看工作区、暂存区状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   git status</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">nothing to commit (create/copy files and use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure>
<h2 id="添加到暂存区">添加到暂存区</h2>
<p><code>git add [fileName]</code></p>
<h3 id="功能-2">功能</h3>
<p>将工作区的“新建/修改”添加到暂存区</p>
<h3 id="解释">解释</h3>
<p>将fileName文件添加到暂存区，即将fileName给git监控/追踪起来，只要文件一发生改变，git就立刻知道</p>
<h3 id="注意-3">注意</h3>
<p><code>git add .  </code></p>
<p>将所有修改过文件添加到暂存区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest  vim good.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest  git status</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">	good.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest  git add good.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   git status</span>                                                                </span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line">	new file:   good.txt</span><br></pre></td></tr></table></figure>
<h3 id="后悔怎么办">后悔怎么办</h3>
<p><code>git rm --cached fileName</code></p>
<p>不会删除文件，将文件从暂存区移除</p>
<h2 id="提交">提交</h2>
<p><code>git commit</code></p>
<p>会进入vim编辑器输入提交信息，不推荐</p>
<p><code>git commit -m &quot;xxx&quot;</code></p>
<p>直接填写信息提交，方便快捷，推荐</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   git commit</span></span><br><span class="line">[master (root-commit) 814509c] my first commit.new file good.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 good.txt</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   master  git status</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<h3 id="注意-4">注意</h3>
<p>修改了文件不想执行add命令再执行commit命令：</p>
<p><code>git commit -a -m &quot;提交信息&quot;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest  git commit -a -m <span class="string">&quot;第二次提交，修改了good.txt&quot;</span></span></span><br><span class="line">[master 51c07db] 第二次提交，修改了good.txt</span><br><span class="line"> 1 file changed, 3 insertions(+), 1 deletion(-)</span><br><span class="line"> rewrite good.txt (100%)</span><br></pre></td></tr></table></figure>
<h2 id="查看历史记录">查看历史记录</h2>
<blockquote>
<p>进入多屏显示状态</p>
<p>space向下翻页</p>
<p>b向上翻页</p>
<p>q退出</p>
</blockquote>
<p><code>git log</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">commit e86a1e0b49e2f4222c8d36b1c0a7f49b0ddcab68 (HEAD -&gt; master)</span><br><span class="line">Author: tom &lt;goodMorning@qq.com&gt;</span><br><span class="line">Date:   Thu Jul 15 01:17:09 2021 +0800</span><br><span class="line"></span><br><span class="line">    第七次提交，good.txt添加了hhhhhh</span><br><span class="line"></span><br><span class="line">commit 246d12660cf29f58977083fd9ea4ab310bd31e72</span><br><span class="line">Author: tom &lt;goodMorning@qq.com&gt;</span><br><span class="line">Date:   Thu Jul 15 01:16:45 2021 +0800</span><br><span class="line"></span><br><span class="line">    第六次提交，good.txt添加了gggggg</span><br><span class="line"></span><br><span class="line">commit 8e4934539a7d6beb506eab659efb3b89f74b410c</span><br><span class="line">Author: tom &lt;goodMorning@qq.com&gt;</span><br><span class="line">Date:   Thu Jul 15 01:16:17 2021 +0800</span><br><span class="line"></span><br><span class="line">    第五次提交，good.txt添加了ffffff</span><br><span class="line"></span><br><span class="line">commit 7afbd2f6234e3a1ed94e36ab5831c8e2cff00a36</span><br><span class="line">Author: tom &lt;goodMorning@qq.com&gt;</span><br><span class="line">Date:   Thu Jul 15 01:15:45 2021 +0800</span><br><span class="line"></span><br><span class="line">    第四次提交，good.txt添加了eeeeee</span><br><span class="line"></span><br><span class="line">:</span><br></pre></td></tr></table></figure>
<p><code>git log --pretty=oneline</code></p>
<p>仅显示长哈希值与提交信息（有HEAD指针）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">e86a1e0b49e2f4222c8d36b1c0a7f49b0ddcab68 (HEAD -&gt; master) 第七次提交，good.txt添加了hhhhhh</span><br><span class="line">246d12660cf29f58977083fd9ea4ab310bd31e72 第六次提交，good.txt添加了gggggg</span><br><span class="line">8e4934539a7d6beb506eab659efb3b89f74b410c 第五次提交，good.txt添加了ffffff</span><br><span class="line">7afbd2f6234e3a1ed94e36ab5831c8e2cff00a36 第四次提交，good.txt添加了eeeeee</span><br><span class="line">4815833a9e63f7fc07bb911d1af342774df903c0 第三次提交，good.txt添加了dddddd</span><br><span class="line">51c07dbf21aac42241d63bbe30280f415d8ae173 第二次提交，修改了good.txt</span><br><span class="line">814509ca05bb06983169bd81d96225b5465ef442 my first commit.new file good.txt</span><br><span class="line">(END)</span><br></pre></td></tr></table></figure>
<p><code>git log --oneline</code></p>
<p>仅显示短哈希值与提交记录（有HEAD指针）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">e86a1e0 (HEAD -&gt; master) 第七次提交，good.txt添加了hhhhhh</span><br><span class="line">246d126 第六次提交，good.txt添加了gggggg</span><br><span class="line">8e49345 第五次提交，good.txt添加了ffffff</span><br><span class="line">7afbd2f 第四次提交，good.txt添加了eeeeee</span><br><span class="line">4815833 第三次提交，good.txt添加了dddddd</span><br><span class="line">51c07db 第二次提交，修改了good.txt</span><br><span class="line">814509c my first commit.new file good.txt</span><br><span class="line">(END)</span><br></pre></td></tr></table></figure>
<p><code>git reflog</code></p>
<p>仅显示短哈希值与 “HEAD@{后退次数}” 与提交信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">e86a1e0 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: 第七次提交，good.txt添加了hhhhhh</span><br><span class="line">246d126 HEAD@&#123;1&#125;: commit: 第六次提交，good.txt添加了gggggg</span><br><span class="line">8e49345 HEAD@&#123;2&#125;: commit: 第五次提交，good.txt添加了ffffff</span><br><span class="line">7afbd2f HEAD@&#123;3&#125;: commit: 第四次提交，good.txt添加了eeeeee</span><br><span class="line">4815833 HEAD@&#123;4&#125;: commit: 第三次提交，good.txt添加了dddddd</span><br><span class="line">51c07db HEAD@&#123;5&#125;: commit: 第二次提交，修改了good.txt</span><br><span class="line">814509c HEAD@&#123;6&#125;: commit (initial): my first commit.new file good.txt</span><br><span class="line">(END)</span><br></pre></td></tr></table></figure>
<h3 id="注意-5">注意</h3>
<p><code>git log</code>是显示当前的<code>HEAD</code>和它的祖先的，递归是沿着当前指针的父亲，父亲的父亲，…，这样的原则。<code>git reflog</code>根本不遍历<code>HEAD</code>的祖先。它是<code>HEAD</code>所指向的一个顺序的提交列表：它的<code>undo</code>历史。<code>reflog</code>并不是<code>repo</code>（仓库）的一部分，它单独存储，而且不包含在<code>pushes</code>，<code>fetches</code>或者<code>clones</code>里面，它纯属是本地的。<code>reflog</code>可以很好地帮助你恢复你误操作的数据，例如你错误地<code>reset</code>了一个旧的提交，或者<code>rebase</code>，…，这个时候你可以使用<code>reflog</code>去查看在误操作之前的信息，并且使用<code>git reset --hard</code> 去恢复之前的状态。</p>
<p>*“注意”*内容来自：<a href="https://blog.csdn.net/chaiyu2002/article/details/81773041">https://blog.csdn.net/chaiyu2002/article/details/81773041</a></p>
<h2 id="版本前进后退">版本前进后退</h2>
<h3 id="本质">本质</h3>
<p>HEAD指针的移动</p>
<p>方式：三种</p>
<h3 id="基于哈希索引值操作【推荐】">基于哈希索引值操作【推荐】</h3>
<p><code>git reset --hard [短哈希值/局部索引值]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   master  git reset --hard 8e49345</span></span><br><span class="line">HEAD is now at 8e49345 第五次提交，good.txt添加了ffffff</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   master  <span class="built_in">cat</span> good.txt</span>  </span><br><span class="line">aaaaaa</span><br><span class="line">bbbbbb</span><br><span class="line">cccccc</span><br><span class="line">dddddd</span><br><span class="line">eeeeee</span><br><span class="line">ffffff</span><br></pre></td></tr></table></figure>
<h3 id="使用-符号：只能后退">使用 <code>^</code> 符号：只能后退</h3>
<p><code>git reset --hard HEAD^</code></p>
<h4 id="注">注</h4>
<p>一个<sup>表示后退一步，n个</sup>表示后退n步</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   master  git reset --hard HEAD^^</span>  </span><br><span class="line">HEAD is now at 4815833 第三次提交，good.txt添加了dddddd</span><br></pre></td></tr></table></figure>
<h3 id="使用-符号：只能后悔">使用 <code>~</code> 符号：只能后悔</h3>
<p><code>git reset --hard HEAD~n</code></p>
<h4 id="注-2">注</h4>
<p>n表示后退n步</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   master  git reset --hard HEAD~1</span>  </span><br><span class="line">HEAD is now at 51c07db 第二次提交，修改了good.txt</span><br></pre></td></tr></table></figure>
<h2 id="reset命令的三个参数对比">reset命令的三个参数对比</h2>
<h4 id="–sort">–sort</h4>
<p>仅在本地库移动HEAD指针</p>
<h4 id="–mixed">–mixed</h4>
<p>在本地库移动HEAD指针</p>
<p>重置暂存区</p>
<h4 id="–hard">–hard</h4>
<p>在本地库移动HEAD指针</p>
<p>重置暂存区、工作区</p>
<h2 id="删除文件并找回">删除文件并找回</h2>
<p><code>git reset --hard [未删除的短哈希值/指针位置]</code></p>
<h3 id="前提">前提</h3>
<p>删除前，文件存在时的状态提交到了本地库</p>
<h3 id="注意-6">注意</h3>
<p>删除操作已经提交到本地库：指针位置指向历史记录</p>
<p>删除操作尚未提交到本地库：指针位置使用HEAD</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   git commit -m <span class="string">&quot;new deleteTestOnet.txt&quot;</span></span>  </span><br><span class="line">[master e6e4a89] new deleteTestOnet.txt</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 deleteTestOne.txt</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest    git reflog</span>  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest    <span class="built_in">ls</span></span></span><br><span class="line">deleteTestOne.txt good.txt</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   <span class="built_in">rm</span> deleteTestOne.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   <span class="built_in">ls</span></span>   </span><br><span class="line">good.txt</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   git reset --hard e6e4a89</span></span><br><span class="line">HEAD is now at e6e4a89 new deleteTestOnet.txt</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   <span class="built_in">ls</span></span></span><br><span class="line">deleteTestOne.txt good.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   vim deleteTestTwo.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   git add .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   git commit -m <span class="string">&quot;new deleteTestTwo.txt&quot;</span></span>  </span><br><span class="line">[master a690049] new deleteTestTwo.txt</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 deleteTestTwo.txt</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   <span class="built_in">ls</span></span>  </span><br><span class="line">deleteTestTwo.txt good.txt</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   <span class="built_in">rm</span> deleteTestTwo.txt</span>  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   <span class="built_in">ls</span></span>  </span><br><span class="line">good.txt</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   git reflog</span>   </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   git reset --hard a690049</span>   </span><br><span class="line">HEAD is now at a690049 new deleteTestTwo.txt</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">~/Desktop/gitTest   <span class="built_in">ls</span></span></span><br><span class="line">deleteTestTwo.txt good.txt</span><br></pre></td></tr></table></figure>
<h2 id="比较文件差异">比较文件差异</h2>
<h3 id="git-diff-fileName"><code>git diff [fileName]</code></h3>
<p>将工作区的文件和暂存区进行比较</p>
<h3 id="git-diff-本地库历史版本-fileName"><code>git diff [本地库历史版本] [fileName]</code></h3>
<p>将工作区中的文件和本地库历史记录比较</p>
<h3 id="注意-7">注意</h3>
<p>不带<strong>文件名</strong>比较多个文件</p>
<h1>分支管理</h1>
<h2 id="分支简介">分支简介</h2>
<p>多个版本并行开发，提高开发效率。</p>
<p>如果一个分支开发失败，不会影响其他分支。</p>
<h2 id="创建分支">创建分支</h2>
<p><code>git branch [branchName]</code></p>
<h2 id="查看分支">查看分支</h2>
<p><code>git branch -v</code></p>
<p>标 <code>*</code> 是目前分支，且标有短哈希值</p>
<h2 id="切换分支">切换分支</h2>
<p><code>git checkout [branchName]</code></p>
<h2 id="合并分支">合并分支</h2>
<p><code>git merge [branchName]</code></p>
<p>将当前分支合并到branchName(有新内容的分支)</p>
<p>可以理解为当前分支指针移动到branchName分支指针的相同位置上，这样，当前分支的内容就变成和branchName分支一样了</p>
<p>极限理解：我合并了branchName，也就是我容纳了branchName，branchName有的东西我也要有，所以把branchName分支上的新内容放到我这</p>
<h3 id="注-3">注</h3>
<p>先要切换到被合并(被修改)分支上再进行合并</p>
<h2 id="解决冲突">解决冲突</h2>
<h3 id="冲突的产生">冲突的产生</h3>
<p>合并时候同一行的两个分支内容不同</p>
<h3 id="解决">解决</h3>
<p>第一步：编辑文件，删除特殊符号，修改到我们想要的内容</p>
<p>第二步：git add xxx</p>
<p>第三步：git commit -m “xxx”</p>
<h1>远程库</h1>
<h2 id="创建远程库地址别名">创建远程库地址别名</h2>
<h3 id="添加远程库地址别名">添加远程库地址别名</h3>
<p><code>git remote add [别名] [远程地址]</code></p>
<p>别名一般为origin</p>
<h3 id="查看所有远程库">查看所有远程库</h3>
<p><code>git remote</code></p>
<h3 id="查看xxx远程库">查看xxx远程库</h3>
<p><code>git remote xxx</code></p>
<h3 id="查看所有远程库地址别名">查看所有远程库地址别名</h3>
<p><code>git remote -v</code></p>
<h2 id="推送到远程库">推送到远程库</h2>
<p><code>git push [别名] [分支名]</code></p>
<h2 id="克隆到本地">克隆到本地</h2>
<p><code>git clone [远程地址]</code></p>
<h3 id="等同操作-效果">等同操作/效果</h3>
<p>一、把完整的远程库下载到本地</p>
<p>二、创建origin远程地址别名</p>
<p>三、初始化本地库</p>
<h2 id="拉取远程库">拉取远程库</h2>
<p><code>git pull [远程库地址别名] [远程分支名]</code></p>
<h3 id="等同操作-效果-2">等同操作/效果</h3>
<p><em><strong>pull = fetch + merge</strong></em></p>
<p>git fetch [远程库地址别名] [远程分支名]</p>
<p>git merge [远程库地址别名] [远程分支名]</p>
<h2 id="解决冲突-2">解决冲突</h2>
<p>如果不是基于GitHub远程库的最新版所做的修改，不能推送，必须先拉取。</p>
<p>拉取下来后如果进入冲突状态，则按照“分支冲突解决”操作解决即可。</p>
<h2 id="ssh登录">ssh登录</h2>
<p>GitHub官方教程：<a href="https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account</a></p>
<p>廖雪峰教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416">https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416</a></p>
<p>gitee同理</p>
<h1>Git 工作流</h1>
<h2 id="是什么？">是什么？</h2>
<p>一套规范，工作流程，用于规范分支、提交流程。</p>
<p>常见的有 gitflow 工作流，以下讲解 gitflow 工作流。</p>
<h2 id="分支命名">分支命名</h2>
<table>
<thead>
<tr>
<th>分支</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>生产主分支，发布到生产环境使用这个分支，由hotfix或者release分支合并过来，不直接提交代码。</td>
</tr>
<tr>
<td>develop</td>
<td>主开发分支 , 基于master分支克隆，由feature分支合并过来，一般不直接提交代码。</td>
</tr>
<tr>
<td>feature</td>
<td>功能开发分支 , 基于develop分支克隆 , 主要用于新需求新功能的开发，同时存在多个。如 <code>feature/login</code> 、 <code>feature/list</code></td>
</tr>
<tr>
<td>release</td>
<td>预发布分支 , 基于feature分支合并到develop之后 , 从develop分支克隆，测试完成后合并到master并打上版本号，同时也合并到develop。如 <code>release/v1.2</code></td>
</tr>
<tr>
<td>bugfix</td>
<td>用于修复不紧急bug</td>
</tr>
<tr>
<td>hotfix</td>
<td>补丁分支 , 基于master分支克隆 , 主要用于对线上的版本进行BUG修复,完成后合并到master分支和develop分支。</td>
</tr>
</tbody>
</table>
<h2 id="流程图">流程图</h2>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2022/10/gitflow-schematicDiagram.png" alt="gitflow-schematicDiagram"></p>
<p>参考链接：</p>
<ol>
<li><a href="https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow">TOWER-git-flow 的工作流程</a></li>
<li><a href="https://www.cnblogs.com/jeffery-zou/p/10280167.html">jeffery_zou-Gitflow工作流程</a></li>
</ol>
<h1><em>参考</em></h1>
<ol>
<li>
<p><a href="https://www.bilibili.com/video/BV1pW411A7a5">【尚硅谷】Git与GitHub基础全套完整版教程（快速上手，一套搞定）</a></p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的官方网站Git教程</a></p>
</li>
</ol>
<h1><em>资料</em></h1>
<ol>
<li>廖雪峰的官方网站Git教程  <a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></li>
<li>GitHub上的高质量的 Git 中文教程 <a href="https://github.com/geeeeeeeeek/git-recipes/blob/master/README.md">https://github.com/geeeeeeeeek/git-recipes/blob/master/README.md</a></li>
<li>git指令在线练习平台  <a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></li>
</ol>
<p>附</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/07/git-cheatsheet-cn.jpeg" alt="git-cheatsheet-cn"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04使用静态ip</title>
    <url>/2021/ubuntu1804StaticIp.html</url>
    <content><![CDATA[<p>如何修改ubuntu的ip并使用静态ip？（半科普</p>
<span id="more"></span>
<p>背景：最近在使用ubuntu，使用ssh连接的方式，ip一直变，很烦，就想到使用静态ip的方式</p>
<h1>预先知识</h1>
<h2 id="热心网友的预先知识">热心网友的预先知识</h2>
<blockquote>
<p><em>(来源于博主荒野雄兵，链接 <a href="https://blog.csdn.net/daerzei/article/details/85058130">https://blog.csdn.net/daerzei/article/details/85058130</a>)</em><br>
Ubuntu里面有管理网络连接的方案：方案1： <code>/etc/network/interfaces</code> （命令行方案）方案2：<code>Network-manager</code> （图形化界面方案）</p>
<p>两套方案是冲突的，不能同时共存。第一个方案适用于命令行如部署在云服务器上，如果你在阿里云，腾讯云，亚马逊云等等这些地方部署了Ubuntu的云服务器的话，就只能这种情况了。</p>
<p>第二个方案适图形化界面一般来说我们自己电脑上安装的Ubuntu都是采用这个方案，但是如果你在 <code>/etc/network/interfaces</code> 里设置了网上信息的话， <code>NetworkManager</code> 就不会接管该网上，即使是你开了，系统重启过后也会自动关闭。</p>
<p>所以嘛，好好想想你最近有没有修改过 <code>/etc/network/interfaces</code> 配置文件。如果你不知道自己有没有修改过的话，这个文件正常应该是这样的（看看有没有谁偷偷修改了你的配置文件）</p>
</blockquote>
<p>我们已经知道有两种管理方案了，所以按理说有两种配置方案。</p>
<h2 id="配置信息的来源去脉">配置信息的来源去脉</h2>
<h3 id="需要的配置信息">需要的配置信息</h3>
<p><code>地址(address)、子网掩码(netmask)、网关(gateway)、域名服务器地址(DNS)</code></p>
<h3 id="配置信息详解">配置信息详解</h3>
<p>地址(address)：ipv4地址，随便填，但是应该符合分配范围，可以从vmware的配置文件查看分配范围，如果懒得找，直接填原来的或者与原来的差不多且不冲突的</p>
<p>子网掩码(netmask)：一般是255.255.255.0，否则要去配置文件找</p>
<p>网关(默认路由)(gateway) 与 DNS：1. 在进入GUI的网络设置前可以看到  2. vm配置文件有</p>
<h3 id="查找配置信息">查找配置信息</h3>
<h4 id="方法一：GUI">方法一：GUI</h4>
<p>ubuntu桌面–&gt;设置–&gt;网络–&gt;有线连接–&gt;设置</p>
<p>此处可以找到ip、gateway、dns</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/05/ubuntu1804IpViewInfo.png" alt="ubuntu1804IpViewInfo"></p>
<h4 id="方法二：vmware配置文件">方法二：vmware配置文件</h4>
<p>macOS路径： <code>/Library/Preferences/VMware Fusion</code></p>
<p><code>networking</code> 文件是有关vmware网络的一些基础配置，如是否开启某个网卡的DHCP，此时不用管</p>
<p>因为我用的是NAT模式，所以进入 <code>vmnet8</code> 文件夹。</p>
<ol>
<li>首先是 <code>dhcpd.conf</code> 文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subnet 172.16.10.0 netmask 255.255.255.0 &#123;</span><br><span class="line">	range 172.16.10.128 172.16.10.254;</span><br><span class="line">	option broadcast-address 172.16.10.255;</span><br><span class="line">	option domain-name-servers 172.16.10.2;</span><br><span class="line">	option domain-name localdomain;</span><br><span class="line">	default-lease-time 1800;                # default is 30 minutes</span><br><span class="line">	max-lease-time 7200;                    # default is 2 hours</span><br><span class="line">	option netbios-name-servers 172.16.10.2;</span><br><span class="line">	option routers 172.16.10.2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从中知道</p>
<blockquote>
<p><code>ip</code> 地址分配范围是 <code>172.16.10.128</code> 到 <code>172.16.10.254</code></p>
<p><code>netmask</code> 为 <code>255.255.255.0</code></p>
<p><code>DNS</code> 为 <code>172.16.10.2</code></p>
</blockquote>
<ol start="2">
<li>其次是 <code>nat.conf</code> 文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># NAT gateway address</span><br><span class="line">ip = 172.16.10.2</span><br><span class="line">netmask = 255.255.255.0</span><br></pre></td></tr></table></figure>
<p>从中知道</p>
<blockquote>
<p><code>gateway</code> 为 <code>172.16.10.2</code></p>
<p><code>netmask</code> 为 <code>255.255.255.0</code></p>
</blockquote>
<h1>！开始修改！</h1>
<h1>方法一：GUI</h1>
<h2 id="在哪里改？">在哪里改？</h2>
<p>ubuntu桌面–&gt;设置–&gt;网络–&gt;有线连接–&gt;设置–&gt;ipv4–&gt;手动，修改以下配置项</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/05/ubuntu1804IpAlterInfo.png" alt="ubuntu1804IpAlterInfo"></p>
<p>改完后记得重启  <code>sudo reboot</code></p>
<h1>方法二：命令行</h1>
<h2 id="在哪里改？-2">在哪里改？</h2>
<p>进入 <code>/etc/network/interfaces</code> ，默认内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br></pre></td></tr></table></figure>
<p>添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto ens33</span><br><span class="line">iface ens33 inet static</span><br><span class="line">address 172.16.10.135</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 172.16.10.2</span><br><span class="line">dns-nameservers 172.16.10.2</span><br></pre></td></tr></table></figure>
<p>注：</p>
<blockquote>
<p>iface ens33 inet static：采用静态ip</p>
<p>其他内容根据预先知识填写就好</p>
</blockquote>
<p>配置完记得重启  <code>sudo reboot</code></p>
<h2 id="Q-A">Q&amp;A</h2>
<p>但此时直接重启会出现“有线未托管”情况，原因是ubuntu的网络管理方案出问题了。</p>
<p>此时需要修改 <code>/etc/NetworkManager/NetworkManager.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[main]</span><br><span class="line">plugins=ifupdown,keyfile</span><br><span class="line"></span><br><span class="line">[ifupdown]</span><br><span class="line">managed=false</span><br><span class="line"></span><br><span class="line">[device]</span><br><span class="line">wifi.scan-rand-mac-address=no</span><br></pre></td></tr></table></figure>
<p>把 <code>managed=false</code> 改成  <code>managed=true</code></p>
<p>后重启 <code>network-manager</code> 或重启ubuntu</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service network-manager restart</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<p>尝试能否ping通百度与能否ssh连接到虚拟机</p>
<h1>tips</h1>
<p>之前ip一直变的时候ssh连接上去，都会保存密钥，会占用不需要的ip的密钥</p>
<p>在主机的 <code>～/.ssh/known_hosts</code> 可以删除</p>
<p><strong>附录</strong></p>
<p><strong>参考</strong></p>
<ol>
<li>Ubuntu18.04连不网 报&quot;有线连接未托管&quot; <a href="https://blog.csdn.net/daerzei/article/details/85058130">https://blog.csdn.net/daerzei/article/details/85058130</a></li>
<li>Ubuntu 18.04 lts 修改静态ip  <a href="http://ivo-wang.github.io/2019/03/26/Ubuntu-18.04-lts-%E4%BF%AE%E6%94%B9%E9%9D%99%E6%80%81ip/">http://ivo-wang.github.io/2019/03/26/Ubuntu-18.04-lts-%E4%BF%AE%E6%94%B9%E9%9D%99%E6%80%81ip/</a></li>
<li>ubuntu16.04配置网卡  <a href="https://blog.csdn.net/stay_zezo/article/details/80718369">https://blog.csdn.net/stay_zezo/article/details/80718369</a></li>
<li>虚拟机Ubuntu 18.04配置固定IP地址（ens33网卡，eth0也一样）ping百度  <a href="https://blog.csdn.net/wu10188/article/details/102985067">https://blog.csdn.net/wu10188/article/details/102985067</a></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>Mac</tag>
        <tag>ip</tag>
      </tags>
  </entry>
  <entry>
    <title>algs4｜macOS《算法》idea环境配置及重定位</title>
    <url>/2021/MacIdeaAlgs4Test.html</url>
    <content><![CDATA[<p>如何在macOS使用idea运行算法第四版中的代码？</p>
<span id="more"></span>
<h1>一、引</h1>
<p>最近看在《算法》第四版，想测试一下书上的代码，但是书上的代码使用了自己的库，比如输入输出类，又并且想尝试一下10W个测试数据，折腾了一下。结果发现网上的教程要么无法复现要么系统不对要么软件不对。</p>
<p>系统：macOS 10.15.6 (19G73)  idea jdk8</p>
<p>代码和数据在官网可以下载</p>
<h1>二、使用</h1>
<h2 id="1-创建项目">1.创建项目</h2>
<p>正常创建</p>
<h2 id="2-导入数据">2.导入数据</h2>
<p>将<code>algs4-data.zip</code>解压放在src目录下(方便重定位指令，但是不美观，可以放在文件夹，指令自行改动)</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/01/algs4Data.png" alt="algs4Data"></p>
<h2 id="3、导入algs4-jar">3、导入algs4.jar</h2>
<p>先将<code>algs4.jar</code>放入Java目录的EXtensions文件夹下：<code> /Library/Java/Extensions/</code>（位置不对无法编译）</p>
<p>idea中导入algs4.jar</p>
<p>文件–&gt;项目结构（ 快捷键com+; ）</p>
<p>模块 --&gt; 依赖 --&gt; (添加) --&gt; 选择<code> /Library/Java/Extensions/</code>下的<code>algs4.jar</code></p>
<p>（我测试的时候只要Java目录中有algs4.jar，不管添加存放在哪里的algs4.jar都可以，晕）</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/01/algs401In.png" alt="algs401In"></p>
<p>成功添加后，记得确定：</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/01/algs402In.png" alt="algs402In"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/01/algs403In.png" alt="algs403In"></p>
<p>成功导入后可以看到<code>algs4.jar</code><br>
<em>注意：直接导入别的目录的也可以看到，但是编译会《找不到》</em></p>
<p>打开可以复制的代码到src目录下使用，但是注意package路径，且要import这本书自己的库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.*;</span><br></pre></td></tr></table></figure>
<p>我的测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hi</span> <span class="operator">=</span> a.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">            <span class="comment">// Key is in a[lo..hi] or not present.</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>      (key &lt; a[mid]) hi = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; a[mid]) lo = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">rank</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(a, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// read the integers from a file</span></span><br><span class="line">        <span class="type">In</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">In</span>(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span>[] allowlist = in.readAllInts();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sort the array</span></span><br><span class="line">        Arrays.sort(allowlist);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// read integer key from standard input; print if not in allowlist</span></span><br><span class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> StdIn.readInt();</span><br><span class="line">            <span class="keyword">if</span> (BinarySearch.indexOf(allowlist, key) == -<span class="number">1</span>)</span><br><span class="line">                StdOut.println(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-编译运行">4.编译运行</h2>
<p>idea终端运行，因为要使用重定向</p>
<p>cd到src目录 —&gt; 编译代码 —&gt; 运行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac   BinarySearch.java  </span><br><span class="line">java   BinarySearch  largeW.txt &lt; largeT.txt  </span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/01/algs4Run.png" alt="algs4Run"></p>
<p>只要一直在输出数据就是运行成功了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/01/algs4Y.png" alt="algs4Y"></p>
<p>附录：</p>
<p>参考：<a href="https://www.geek-share.com/detail/2733583097.html">如何在Intellij Idea下编译运行《算法》里的程序？</a></p>
<p>官网：<a href="https://algs4.cs.princeton.edu/home/">算法第四版官网</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>idea</tag>
        <tag>algs4</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/cln8kdk58000jrnyk5565brk0.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>algs4｜Dijkstra的双栈算术表达式求值算法Java</title>
    <url>/2021/algs4DijkstraJava.html</url>
    <content><![CDATA[<p>使用Java自身的输入输出库实现Dijkstra的双栈算术表达式求值算法</p>
<span id="more"></span>
<h1>一、算法原理</h1>
<p>计算表达式<code>( 1 + ( ( 2 + 3 ) * ( 4 * 5 ) ) )</code></p>
<p>分析书上有，不赘述。算法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将操作数压入操作数栈；</span><br><span class="line">将运算符压入运算符栈；</span><br><span class="line">忽略左括号；</span><br><span class="line">在遇到右括号时，弹出一个运算符，弹出所需数量的操作数，并将运算符和操作数的运算结果压入操作数栈。</span><br></pre></td></tr></table></figure>
<p>书上源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evaluate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">        Stack&lt;String&gt; ops  = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;();</span><br><span class="line">        Stack&lt;Double&gt; vals = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Double&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> StdIn.readString();</span><br><span class="line">            <span class="keyword">if</span>      (s.equals(<span class="string">&quot;(&quot;</span>))               ;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">&quot;+&quot;</span>))    ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">&quot;-&quot;</span>))    ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">&quot;*&quot;</span>))    ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">&quot;/&quot;</span>))    ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">&quot;sqrt&quot;</span>)) ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">&quot;)&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">op</span> <span class="operator">=</span> ops.pop();</span><br><span class="line">                <span class="type">double</span> <span class="variable">v</span> <span class="operator">=</span> vals.pop();</span><br><span class="line">                <span class="keyword">if</span>      (op.equals(<span class="string">&quot;+&quot;</span>))    v = vals.pop() + v;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">&quot;-&quot;</span>))    v = vals.pop() - v;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">&quot;*&quot;</span>))    v = vals.pop() * v;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">&quot;/&quot;</span>))    v = vals.pop() / v;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">&quot;sqrt&quot;</span>)) v = Math.sqrt(v);</span><br><span class="line">                vals.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> vals.push(Double.parseDouble(s));</span><br><span class="line">        &#125;</span><br><span class="line">        StdOut.println(vals.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>二、问题</h1>
<p>算法第四版中的Dijkstra的双栈算术表达式求值算法中，<code>while (!StdIn.isEmpty())</code> 循环无法跳出</p>
<p><code>StdIn.isEmpty()的实现:</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !scanner.hasNext();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>三、解决方法</h1>
<h2 id="法一｜敌动我不动：">法一｜敌动我不动：</h2>
<p>控制台输入以下快捷键：</p>
<p><code>macOS</code> ： <code>Command+D</code></p>
<p><code>Windows</code> ： <code>Ctrl+D</code></p>
<blockquote>
<p>原理：⌘D组合键可让您发送EOF(文件末尾)，即表示无法从数据源读取更多数据。</p>
</blockquote>
<h2 id="法二｜敌不动我动：">法二｜敌不动我动：</h2>
<p>不用StdIn，使用Java自己的库重新写一遍</p>
<blockquote>
<p>只处理了±*/，没有处理算术平方根</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEvaluate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stack&lt;String&gt; ops = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;();</span><br><span class="line">        Stack&lt;Double&gt; vals = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Double&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String str;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入算术表达式，中间用空格隔开，括号用英文字符：&quot;</span>);</span><br><span class="line">        str = sc.nextLine();</span><br><span class="line">        String[] sArray = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : sArray) &#123; <span class="comment">// 迭代处理</span></span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;(&quot;</span>)) ; <span class="comment">//不做处理</span></span><br><span class="line">            <span class="comment">//是否为操作符</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">&quot;+&quot;</span>) || s.equals(<span class="string">&quot;-&quot;</span>) || s.equals(<span class="string">&quot;*&quot;</span>) || s.equals(<span class="string">&quot;/&quot;</span>)) ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">&quot;)&quot;</span>)) &#123; <span class="comment">//右括号，取操作符和数字计算</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">op</span> <span class="operator">=</span> ops.pop();</span><br><span class="line">                <span class="type">double</span> <span class="variable">val</span> <span class="operator">=</span> vals.pop();</span><br><span class="line">                <span class="keyword">if</span> (op.equals(<span class="string">&quot;+&quot;</span>)) val = vals.pop() + val;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">&quot;-&quot;</span>)) val = vals.pop() - val;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">&quot;*&quot;</span>)) val = vals.pop() * val;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">&quot;/&quot;</span>)) val = vals.pop() / val;</span><br><span class="line">                vals.push(val);</span><br><span class="line">            &#125; <span class="keyword">else</span> vals.push(Double.parseDouble(s));  <span class="comment">//数，存入栈中</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(str + <span class="string">&quot; = &quot;</span> + vals.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运算示例：<br>
<img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/01/algs4DijkstraEx01.png" alt="algs4DijkstraEx01"></p>
<p><strong>循环输入版本：</strong></p>
<blockquote>
<p>如果要循环计算算术表达式：</p>
<ol>
<li>请在合适位置添加<code>while(sc.hasNextLine())</code></li>
<li>除去提示语句，因为会造成输出上逻辑混乱，但是代码本身是可以执行的</li>
<li>设置退出条件，否则程序循环执行，就跟书上的一样了。</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEvaluate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stack&lt;String&gt; ops = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;();</span><br><span class="line">        Stack&lt;Double&gt; vals = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Double&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNextLine()) &#123;</span><br><span class="line">            str = sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (str.equals(<span class="string">&quot;q&quot;</span>)) &#123; <span class="comment">//退出</span></span><br><span class="line">                System.out.println(<span class="string">&quot;已退出，终止程序！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] sArray = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String s : sArray) &#123; <span class="comment">// 迭代处理</span></span><br><span class="line">                <span class="keyword">if</span> (s.equals(<span class="string">&quot;(&quot;</span>)) ; <span class="comment">//不做处理</span></span><br><span class="line">                    <span class="comment">//是否为操作符</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">&quot;+&quot;</span>) || s.equals(<span class="string">&quot;-&quot;</span>) || s.equals(<span class="string">&quot;*&quot;</span>) || s.equals(<span class="string">&quot;/&quot;</span>)) ops.push(s);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">&quot;)&quot;</span>)) &#123; <span class="comment">//右括号，取操作符和数字计算</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">op</span> <span class="operator">=</span> ops.pop();</span><br><span class="line">                    <span class="type">double</span> <span class="variable">val</span> <span class="operator">=</span> vals.pop();</span><br><span class="line">                    <span class="keyword">if</span> (op.equals(<span class="string">&quot;+&quot;</span>)) val = vals.pop() + val;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">&quot;-&quot;</span>)) val = vals.pop() - val;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">&quot;*&quot;</span>)) val = vals.pop() * val;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">&quot;/&quot;</span>)) val = vals.pop() / val;</span><br><span class="line">                    vals.push(val);</span><br><span class="line">                &#125; <span class="keyword">else</span> vals.push(Double.parseDouble(s));  <span class="comment">//数，存入栈中</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(str + <span class="string">&quot; = &quot;</span> + vals.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例：<br>
<img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/01/algs4DijkstraEx02.png" alt="algs4DijkstraEx02"></p>
<p><strong>附录</strong></p>
<p>参考：</p>
<ol>
<li><a href="http://zzanswer.github.io/2016/03/23/Dijkstra%E7%9A%84%E5%8F%8C%E6%A0%88%E7%AE%97%E6%9C%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E7%AE%97%E6%B3%95/">Dijkstra的双栈算术表达式求值算法 Java实现</a>   <em>问题：char型，只能处理个位数</em></li>
<li><a href="https://www.coder.work/article/1934742">java - 如何使StdIn.isEmpty()返回true？</a></li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>algs4</tag>
        <tag>Dijkstra</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么consolelog在修改之前就输出修改后的值？</title>
    <url>/2021/HowCanIMakeConsoleLogShowTheCurrentStateOfAnObject.html</url>
    <content><![CDATA[<p>本文讲解JavaScript中修改数组中的数据与console.log问题。</p>
<span id="more"></span>
<h2 id="背景">背景</h2>
<p>今天写DP，<code>console.log</code> 打印二维数组，发现无论是修改前打印还是修改后打印都是一样的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>],[<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>],[<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">999</span>; arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">999</span>; arr[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">999</span>; arr[<span class="number">3</span>][<span class="number">4</span>] = <span class="number">999</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/10/FirstError.png" alt="FirstError"></p>
<p>为什么会出现这种现象？如果我非要看修改前的，怎么看？<em>最后有例子</em></p>
<h2 id="预备知识">预备知识</h2>
<p><code>console.log</code> 对于六种基本类型是直接输出，对于引用类型是打印引用的<strong>快照</strong>。</p>
<p>且当有多层时，不会展开多层，而是保存第二层的引用，当你点击展开时才去读取内容。</p>
<h2 id="分析">分析</h2>
<h3 id="chrome-devtools-会默认预览下一层。"><code>chrome devtools</code>  会默认预览下一层。</h3>
<blockquote>
<p>注意“加载、展开、预览”的区别</p>
<p>加载：从内存中加载数据</p>
<p>展开：单击按钮展开数据</p>
<p>预览：未展开时看到的数据</p>
</blockquote>
<p>初始是不展开任何层，但预览第一层。</p>
<p>当你点第一个展开键(三角形)时，加载第一层的内容，展开的是第一层，预览第二层（无第二层则只展开第一层）。但因为 <code>chrome devtools</code> 有缓存，即使展开看到修改后的内容，但预览不会变。</p>
<p>点击第二个展开键，加载第二层，展开第二层，预览第三层（没有则只展开第二层）。多层同理。</p>
<h3 id="若想看到未修改的所有内容">若想看到未修改的所有内容</h3>
<p>若想看到未修改的所有内容，则要在修改语句执行之前就展开后续层级，这时候 <code>chrome devtools</code> 就会输出未修改的内容，可以用 <code>setTImeout</code> 验证，在 <code>setTImeout</code> 的延时函数执行前展开后续层级。</p>
<p>如果是修改语句执行结束了，再去展开，就是修改后的内容。</p>
<h3 id="关闭再展开并不会重新读取内容。">关闭再展开并不会重新读取内容。</h3>
<p>关闭再展开并不会重新读取内容。当 <code>setTimeout</code> 的延迟函数执行前展开所有，会看到未修改的所有内容，预览和展开都正确。当 <code>setTImeoout</code> 执行完后关闭再展开（此时已修改），输出依然不变，依然是修改前的内容，因为已经加载过了就不重新读取了。</p>
<h2 id="怎么解决">怎么解决</h2>
<p>虽然 <code>setTimeoout</code> 可以用，但并不是最优解。毕竟每次都要赶时间去展开所有层级。</p>
<h3 id="JSON化">JSON化</h3>
<p>先将对象(二维数组也是对象)转换成json字符串再解析一次。 <code>JSON.parse(JSON.stringify(xxx))</code></p>
<h4 id="JSON-stringify"><code>JSON.stringify()</code></h4>
<p>将JavaScript对象或值转换为json字符串</p>
<h4 id="JSON-paarse"><code>JSON.paarse()</code></h4>
<p>解析json字符串</p>
<h3 id="深拷贝">深拷贝</h3>
<p>对每个层级进行一次深拷贝。但这不是明智的做法。</p>
<h2 id="代码演示">代码演示</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">testAny</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">		oneArr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">		twoArr = [[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]];</span><br><span class="line">		oneObj = &#123;<span class="string">&quot;a&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;b&quot;</span>:<span class="number">10</span>&#125;;</span><br><span class="line">		twoObj = &#123;<span class="string">&quot;a&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;b&quot;</span>:<span class="number">20</span>,<span class="string">&quot;c&quot;</span>:&#123;<span class="string">&quot;d&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;e&quot;</span>:<span class="string">&quot;对象中的字符串1&quot;</span>&#125;&#125;;</span><br><span class="line">		str = <span class="string">&quot;字符串1&quot;</span>;</span><br><span class="line">		num = <span class="number">1</span>;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改前的普通输出&quot;</span>); <span class="comment">// 修改前的普通输出</span></span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(oneArr,twoArr,oneObj,twoObj,str,num);</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改前经过json化的输出&quot;</span>);<span class="comment">// 修改前经过json化的输出</span></span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(oneArr)),<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(twoArr)),<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(oneObj)),<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(twoObj)),<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(str)),<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(num)));</span><br><span class="line"></span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">			oneArr[<span class="number">1</span>] = <span class="number">999</span>;</span><br><span class="line">			twoArr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">999</span>, twoArr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">999</span>;</span><br><span class="line">			oneObj.<span class="property">a</span> = <span class="literal">false</span>,oneObj.<span class="property">b</span> = <span class="number">30</span>;</span><br><span class="line">			twoObj.<span class="property">a</span> = <span class="literal">false</span>,twoObj.<span class="property">b</span> = <span class="number">40</span>, twoObj.<span class="property">c</span>.<span class="property">d</span>=<span class="literal">false</span>, twoObj.<span class="property">c</span>.<span class="property">e</span>=<span class="string">&quot;对象中的字符串2&quot;</span>;</span><br><span class="line">			str = <span class="string">&quot;字符串2&quot;</span></span><br><span class="line">			num = <span class="number">999</span>;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改后的普通输出&quot;</span>); <span class="comment">// 修改后的普通输出</span></span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(oneArr,twoArr,oneObj,twoObj,str,num);</span><br><span class="line">		&#125;,<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">testAny</span>();</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/10/LastTest.png" alt="LastTest"></p>
<p><em><strong>附录</strong></em></p>
<p>参考</p>
<ol>
<li>
<p><a href="https://segmentfault.com/q/1010000017100551">Js中修改数组中的数据与console.log问题</a></p>
</li>
<li>
<p><a href="https://juejin.cn/post/6867746382938603528">问题记录：console.log在对象修改前打印出对象修改后的值</a></p>
</li>
<li>
<p><a href="https://stackoverflow.com/questions/7389069/how-can-i-make-console-log-show-the-current-state-of-an-object">How can I make console.log show the current state of an object?</a>   StackOverflow2011年问答</p>
</li>
<li>
<p><a href="https://stackoverflow.com/questions/28766338/why-does-console-log-output-modified-values-even-before-they-have-been-modified">Why does console.log output modified values even before they have been modified? </a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数组</tag>
        <tag>打印输出</tag>
      </tags>
  </entry>
  <entry>
    <title>在Mac上使用sublime_text3运行Java</title>
    <url>/2020/MacSublimeText3Java.html</url>
    <content><![CDATA[<p>在sublime text3中可以编译Java但不能运行，只需要添加一个编译环境即可</p>
<span id="more"></span>
<h2 id="1-新建编译系统">1. 新建编译系统</h2>
<p>英文：Tools–&gt;Build System–&gt;New Build System<br>
中文：工具–&gt;编译系统–&gt;新建编译系统</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2020/09/NewBuildSystem.png" alt="NewBuildSystem"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&quot;shell_cmd&quot;: &quot;javac -encoding utf-8 $file_name &amp;&amp; java $file_base_name&quot;,</span><br><span class="line"></span><br><span class="line">&quot;file_regex&quot;: &quot;^ *\\[javac\\] (.+):([0-9]+):() (.*)$&quot;,</span><br><span class="line"></span><br><span class="line">&quot;selector&quot;: &quot;source.java&quot;,</span><br><span class="line"></span><br><span class="line">&quot;encoding&quot;: &quot;utf-8&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>复制粘贴上面代码，保存，路径不变，文件名为：<code>xxx.sublime-build</code>，其中xxx为编译系统的名字，随便取，如我的xxx为JavaRun，一目了然知道要用来干嘛的。</p>
<h2 id="2-选择编译系统">2. 选择编译系统</h2>
<p>英文：Tools–&gt;Build System–&gt;JavaRun<br>
中文：工具–&gt;编译系统–&gt;JavaRun</p>
<h2 id="3-cmd-B编译并运行">3. cmd+B编译并运行</h2>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2020/09/sublimetext3javacoderun.png" alt="sublimetext3javacoderun"></p>
<p>参考：</p>
<p><a href="https://www.jianshu.com/p/0fac60f43ca7">Mac 使用Sublime Text 3搭建java环境</a></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>sublime_text3</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在mac上使用SQL server与在Linux上安装SQL server</title>
    <url>/2021/HowUseSQL_serverOnMacAndLinuxInstallSQL_server.html</url>
    <content><![CDATA[<p>本文详细介绍在mac无法安装SSMS的情况下使用sql server与安装过程中出现的情况</p>
<span id="more"></span>
<h1>背景</h1>
<p>学校数据库要用sql server，无奈mac无法安装。</p>
<p>解决方法有：</p>
<ol>
<li>window虚拟机 （臃肿</li>
<li>云数据库 （贵</li>
<li>云服务器安装sql server （未必人人都有且贵</li>
<li>虚拟机安装sql server，然后通过 <code>navicat premium</code> 或者其他数据库管理软件连接上</li>
</ol>
<p>最终选择了第四种（我的服务器装着古老的Windows server 2012），且第四种可复现程度较大。</p>
<h3 id="本次试验平台-软件">本次试验平台&amp;软件</h3>
<p>Ubuntu 18.04 (需要2g空闲内存，可改)</p>
<p>macOS 10.15.7</p>
<p>navicat premium</p>
<p>SQL Server 2019</p>
<h1>一、安装 SQL Server</h1>
<p><strong>根据官网安装方法最佳</strong>： <a href="https://docs.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-ubuntu?view=sql-server-ver15">https://docs.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-ubuntu</a></p>
<h2 id="安装步骤：">安装步骤：</h2>
<ol>
<li>导入公共存储库 GPG 密钥：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>为 SQL Server 2019 注册 Microsoft SQL Server Ubuntu 存储库：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;<span class="subst">$(wget -qO- https://packages.microsoft.com/config/ubuntu/18.04/mssql-server-2019.list)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>运行以下命令以安装 SQL Server：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y mssql-server</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>包安装完成后，运行 <strong>mssql-conf setup</strong>，按照提示设置 SA 密码并选择版本</li>
</ol>
<p>SA：system administrator，系统管理员，具有最高权限</p>
<p>可能会出现内存不足报错与权限问题，看后面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /opt/mssql/bin/mssql-conf setup</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">选择 SQL Server 的一个版本:</span><br><span class="line">  1) Evaluation (免费，无生产许可，180 天限制)</span><br><span class="line">  2) Developer (免费，无生产许可)</span><br><span class="line">  3) Express (免费)</span><br><span class="line">  4) Web (付费版)</span><br><span class="line">  5) Standard (付费版)</span><br><span class="line">  6) Enterprise (付费版) - CPU 核心利用率限制为 20 个物理/40 个超线程</span><br><span class="line">  7) Enterprise Core (付费版) - CPU 核心利用率达到操作系统最大值</span><br><span class="line">  8) 我通过零售渠道购买了许可证并具有要输入的产品密钥。</span><br></pre></td></tr></table></figure>
<p>此处按需选择，一般选择 <code>2</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">选择 SQL Server 的语言:</span><br><span class="line">(1) English</span><br><span class="line">(2) Deutsch</span><br><span class="line">(3) Español</span><br><span class="line">(4) Français</span><br><span class="line">(5) Italiano</span><br><span class="line">(6) 日本語</span><br><span class="line">(7) 한국어</span><br><span class="line">(8) Português</span><br><span class="line">(9) Русский</span><br><span class="line">(10) 中文 – 简体</span><br><span class="line">(11) 中文 （繁体）</span><br><span class="line">输入选项 1-11:10</span><br><span class="line">输入 SQL Server 系统管理员密码:</span><br><span class="line">确认 SQL Server 系统管理员密码:</span><br><span class="line">正在配置 SQL Server...</span><br></pre></td></tr></table></figure>
<p>此处按需</p>
<blockquote>
<p>注意：密码要大写字母、小写字母、数字、字符四选三</p>
</blockquote>
<ol start="5">
<li>完成配置后，验证服务是否正在运行：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status mssql-server --no-pager</span><br></pre></td></tr></table></figure>
<blockquote>
<p>active (running) : 运行中</p>
</blockquote>
<ol start="6">
<li>如果计划远程连接，可能还需要在防火墙上打开 SQL Server TCP 端口（默认值为 1433）</li>
</ol>
<p>Ubuntu防火墙默认关闭，ufw status可以查看。</p>
<p>tips：防火墙关闭也可以连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 1433/tcp</span><br><span class="line">sudo ufw reload</span><br></pre></td></tr></table></figure>
<p>具体参考：<a href="https://www.linuxidc.com/Linux/2018-06/152881.htm">如何在Ubuntu 18.04上使用UFW设置防火墙</a></p>
<p>安装完成，此时你已经可以通过软件连接了，但是你可能会出现以下问题。</p>
<h2 id="常见报错">常见报错</h2>
<ol>
<li>内存不足</li>
</ol>
<p>安装SQL Server要求要2g空闲内存，作为试验品必然不分配太多，直接改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/mssql/bin/ <span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">mv</span> sqlservr sqlservr.old <span class="comment"># 保存备份文件</span></span><br><span class="line">python <span class="comment"># 使用python修改内存限制代码</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;oldfile = <span class="built_in">open</span>(<span class="string">&quot;sqlservr.old&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">&gt;&gt;&gt;newfile = oldfile.replace(<span class="string">&quot;\x00\x94\x35\x77&quot;</span>, <span class="string">&quot;\x00\x80\x84\x1e&quot;</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">open</span>(<span class="string">&quot;sqlservr&quot;</span>, <span class="string">&quot;wb&quot;</span>).write(newfile)</span><br><span class="line">&gt;&gt;&gt;exit()</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<blockquote>
<ol>
<li>要用python2</li>
<li>若出现文件权限问题，请使用 <code>sudo python</code> 进去python2</li>
</ol>
</blockquote>
<p>修改后，内存限制被缩小为 512 MB，回到～正常安装即可。</p>
<blockquote>
<p>回到～，再次执行上面第四步</p>
<p>建议先执行 sudo chmod 777 sqlservr 防止出现下一个报错</p>
</blockquote>
<ol start="2">
<li>sqlservr: 权限不够</li>
</ol>
<p>经过上面执行，安装时可能会出现sqlservr文件权限不够问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash: /opt/mssql/bin/sqlservr: 权限不够</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/mssql-server.service → /lib/systemd/system/mssql-server.service.</span><br><span class="line">安装程序已成功完成。SQL Server 正在启动。</span><br></pre></td></tr></table></figure>
<p>通过修改文件权限解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/mssql/bin</span><br><span class="line">sudo <span class="built_in">chmod</span> 777 sqlservr</span><br></pre></td></tr></table></figure>
<p>回到～，再次执行上面第四步</p>
<h1>二、在Mac连接数据库</h1>
<p>此时已经可以通过软件连接到虚拟机里的SQL Server</p>
<img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/04/sql_serverNewConnection01.png" alt="sql_serverNewConnection01" style="zoom: 50%;" />
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/04/sql_serverConnectionSuccess01.png" alt="sql_serverConnectionSuccess01"></p>
<h1>三、安装SQL Server命令行工具</h1>
<p>仍是建议看官方文档：<a href="https://docs.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-ubuntu?view=sql-server-ver15">https://docs.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-ubuntu?view=sql-server-ver15</a></p>
<ol>
<li>导入公共存储库 GPG 密钥</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>注册 Microsoft Ubuntu 存储库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://packages.microsoft.com/config/ubuntu/18.04/prod.list | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/msprod.list</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>更新源列表，并使用 unixODBC 开发人员包运行安装命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install mssql-tools unixodbc-dev</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><strong>可选</strong>：向 bash shell 中的 PATH 环境变量添加 <code>/opt/mssql-tools/bin/</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PATH:/opt/mssql-tools/bin&quot;&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PATH:/opt/mssql-tools/bin&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<h1>四、本地测试</h1>
<p><em>以下步骤使用 sqlcmd 本地连接到新的 SQL Server 实例</em></p>
<h2 id="命令行连接">命令行连接</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlcmd -S localhost -U SA -P <span class="string">&#x27;&lt;YourPassword&gt;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>-S：名称</p>
<p>-U：用户名，此时用SA</p>
<p>-P：密码，上面设置的密码，替换-P后面的文本</p>
<h2 id="新建数据库">新建数据库</h2>
<p>一行一行输入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE TestDB</span><br><span class="line"><span class="keyword">SELECT</span> Name <span class="keyword">from</span> sys.Databases</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>
<p>Tips：<em>前两个命令没有立即执行。 必须在新行中键入 <code>GO</code> 才能执行以前的命令</em></p>
<p>执行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">os@os-virtual-machine:~$ sqlcmd -S localhost -U SA -P SQL_server</span><br><span class="line">1&gt; CREATE DATABASE TestDB</span><br><span class="line">2&gt; SELECT Name from sys.Databases</span><br><span class="line">3&gt; GO</span><br><span class="line">Name</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">master</span><br><span class="line">tempdb</span><br><span class="line">model</span><br><span class="line">msdb</span><br><span class="line">TestDB</span><br></pre></td></tr></table></figure>
<img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/04/sql_serverCreateDB01.png" alt="sql_serverCreateDB01" style="zoom:50%;" />
<h2 id="插入数据">插入数据</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE TestDB</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Inventory (id <span class="type">INT</span>, name NVARCHAR(<span class="number">50</span>), quantity <span class="type">INT</span>)</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1&gt; USE TestDB</span><br><span class="line">2&gt; CREATE TABLE Inventory (<span class="built_in">id</span> INT, name NVARCHAR(50), quantity INT)</span><br><span class="line">3&gt; INSERT INTO Inventory VALUES (1, <span class="string">&#x27;banana&#x27;</span>, 150); INSERT INTO Inventory VALUES (2, <span class="string">&#x27;orange&#x27;</span>, 154);</span><br><span class="line">4&gt; GO</span><br><span class="line">Changed database context to <span class="string">&#x27;TestDB&#x27;</span>.</span><br><span class="line"></span><br><span class="line">(1 rows affected)</span><br><span class="line"></span><br><span class="line">(1 rows affected)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/04/sql_serverInsertDB02.png" alt="sql_serverInsertDB02"></p>
<h2 id="选择数据">选择数据</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Inventory <span class="keyword">WHERE</span> quantity <span class="operator">&gt;</span> <span class="number">152</span>;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1&gt; SELECT * FROM Inventory WHERE quantity &gt; 152;</span><br><span class="line">2&gt; GO</span><br><span class="line"><span class="built_in">id</span>          name                                               quantity</span><br><span class="line">----------- -------------------------------------------------- -----------</span><br><span class="line">          2 orange                                                     154</span><br><span class="line"></span><br><span class="line">(1 rows affected)</span><br></pre></td></tr></table></figure>
<h2 id="退出sqlcmd">退出sqlcmd</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">QUIT</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ol>
<li>快速入门：安装 SQL Server 并在 Ubuntu 上创建数据库 <a href="https://docs.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-ubuntu?view=sql-server-ver15">https://docs.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-ubuntu?view=sql-server-ver15</a></li>
<li>Linux安装SQL Server 2017（安装篇SQL Server on linux）： <a href="https://blog.csdn.net/sqlserverdiscovery/article/details/79193959">https://blog.csdn.net/sqlserverdiscovery/article/details/79193959</a></li>
<li>破解2G限制：<a href="https://www.cnblogs.com/biaogejiushibiao/p/9280841.html">https://www.cnblogs.com/biaogejiushibiao/p/9280841.html</a></li>
<li>Linux 下安装sql server 时 2G内存限制的最新（2019-08-15） 解决方案： <a href="https://blog.csdn.net/weixin_30451709/article/details/99934495">https://blog.csdn.net/weixin_30451709/article/details/99934495</a></li>
</ol>
]]></content>
      <categories>
        <category>Mac</category>
        <category>软件&amp;工具&amp;技巧</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>Mac</tag>
        <tag>SQl_server</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇hexo框架blog</title>
    <url>/2020/myfisrsthexoblog.html</url>
    <content><![CDATA[<p>@<a href="%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">TOC</a></p>
<h1>我的博客编写</h1>
<span id="more"></span>
<blockquote>
<p>用“<!-- more -->”可以控制博客文章在首页的长度，后面内容不显示</p>
</blockquote>
<h1>一级标题</h1>
<h2 id="二级标题">二级标题</h2>
<h3 id="三级标题">三级标题</h3>
<h4 id="四级标题">四级标题</h4>
<h5 id="五级标题">五级标题</h5>
<h6 id="六级标题">六级标题</h6>
<p>注意标题都有索引，而直接换行没有，这就是一个换行</p>
<h2 id="区块引入">区块引入</h2>
<blockquote>
<p>这是一段引入段落，Typora快捷方式为Ctrl+Shitf+Q</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是一段引入代码，Typora快捷方式为Ctrl+Shitf+K&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);<span class="built_in">printf</span>(<span class="string">&quot;测试换行&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>$$<br>
这里是一个引入公式，Typora快捷方式为Ctrl+Shitf+M<br>
x=-2a/s<br>
$$</p>
<h2 id="超链接">超链接</h2>
<p><a href="https://www.baidu.com">百度</a></p>
<h2 id="图片">图片</h2>
<p><img src="http://pic2.52pk.com/files/allimg/160510/143922CM-1.jpg" alt="源氏"></p>
<h2 id="无序列表">无序列表</h2>
<ul>
<li>
<p>无序列表</p>
</li>
<li>
<p>用“ - ”</p>
</li>
</ul>
<ul>
<li>或者“ * ”</li>
</ul>
<ul>
<li>或者快捷键C+S+]</li>
</ul>
<p>##有序列表</p>
<ol>
<li>有序列表</li>
<li>把无序的“ - ”改成“ 1. ”</li>
</ol>
<p>##分割线用三个或三个以上的“ — ”或“ *** ”</p>
<hr>
<hr>
<p>最好用五个</p>
<hr>
<p>参考网上资料8</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28133171&auto=1&height=66"></iframe>]]></content>
      <categories>
        <category>分类测试</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>标签测试</tag>
      </tags>
  </entry>
  <entry>
    <title>算法｜最大公因数和最小公倍数多个详细版-JavaScript</title>
    <url>/2022/gcd-lcm-one-and-more-js.html</url>
    <content><![CDATA[<p>使用 Javascript 描述了多种求两个数或多个数的 GCD 和 LCM 的方法。</p>
<span id="more"></span>
<h1>最大公约数（Greatest Common Divisor）</h1>
<p><strong>定义</strong><br>
也叫最大公因数。简单：因数最大严谨：指一个或多个数中，a1 ～ an ，都能被 k 整除，k 是公约数，k 最大时即为最大公约数。</p>
<h2 id="两个数的最大公约数">两个数的最大公约数</h2>
<h3 id="倒数遍历求解">倒数遍历求解</h3>
<p>找到两个数中较小的那个数，称之为a，从a开始遍历到1，找到一个都能被a和b整数的数，符合定义。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  a = a &amp;&amp; <span class="built_in">parseInt</span>(a)</span><br><span class="line">  b = b &amp;&amp; <span class="built_in">parseInt</span>(b)</span><br><span class="line">  <span class="keyword">if</span> (a - b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    [a, b] = [b, a]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = a; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a % i === <span class="number">0</span> &amp;&amp; b % i === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，当两数相差较大时，让a成为较小值是非常必要的。</p>
<h3 id="辗转相除法（欧几里德算法）">辗转相除法（欧几里德算法）</h3>
<p>前提：<code>gcd(a, b) === gcd(b, a mod b)</code> (a &gt; b &amp;&amp; a mod b &gt; 0)<br>
证明：<br>
a可以表示成a = kb + r  (a，b，k，r皆为正整数，且 r &gt; 0)<br>
假设d是a,b的一个公约数，即a和b都可以被d整除。而r = a - kb，两边同时除以d，r/d=a/d-kb/d，由等式右边可知r/d为整数，因此d也是r的因数。<br>
d是a和b的公因数，也是b和r的公因数，即d也是b,a mod b的公约数。因(a,b)和(b,a mod b)的公约数相等，则其最大公约数也相等，得证。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">gcd</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line">	a = a &amp;&amp; <span class="built_in">parseInt</span>(a)</span><br><span class="line">	b = b &amp;&amp; <span class="built_in">parseInt</span>(b)</span><br><span class="line">	<span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">		[a, b] = [b, a]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (a % b === <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> b</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="title function_">gcd</span>(b, a % b)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简洁版：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">gcd</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> a % b ? <span class="title function_">gcd</span>(b, a % b) : b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="更损相减法">更损相减法</h3>
<p>第一步：若都为偶数，重复除2直到最少又一个奇数，但要记下除了多少。第二步：重复用大数减小数，直到减数等于差。最大公约数为 第一步被除了多少 * 第二步的差。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">gcd</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line">	a = a &amp;&amp; <span class="built_in">parseInt</span>(a)</span><br><span class="line">	b = b &amp;&amp; <span class="built_in">parseInt</span>(b)</span><br><span class="line">	<span class="comment">// 若两个相等，不作判断后面死循环</span></span><br><span class="line">	<span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">		[a, b] = [b, a]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 除2</span></span><br><span class="line">	<span class="keyword">let</span> sum = <span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> (a % <span class="number">2</span> === <span class="number">0</span> &amp;&amp; b % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">		a /= <span class="number">2</span></span><br><span class="line">		b /= <span class="number">2</span></span><br><span class="line">		sum *= <span class="number">2</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 开始相减</span></span><br><span class="line">	<span class="keyword">let</span> poor = a - b</span><br><span class="line">	<span class="keyword">while</span> (poor !== b) &#123;</span><br><span class="line">		<span class="keyword">if</span> (poor &lt; b) &#123;</span><br><span class="line">			a = b</span><br><span class="line">			b = poor</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			a = poor</span><br><span class="line">		&#125;</span><br><span class="line">		poor = a - b</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> poor * sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多个数的最大公约数">多个数的最大公约数</h2>
<p>若参数个数为0，返回 undefined ，若参数个数为1，返回该参数。否则先求解前2个参数的最大公约数，然后用该最大公约数和第三个数求最大公约数，以此类推。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">gcdMoreNumber</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">	<span class="keyword">if</span> (arr.<span class="property">length</span> &lt; <span class="number">1</span>) <span class="keyword">return</span> </span><br><span class="line">	<span class="keyword">while</span> (arr.<span class="property">length</span> &gt; <span class="number">1</span>) arr.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">2</span>,<span class="title function_">gcd</span>(arr[<span class="number">0</span>], arr[<span class="number">1</span>]))</span><br><span class="line">	<span class="keyword">return</span> arr[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>最小公倍数（Least Common Multiple）</h1>
<p><strong>定义</strong><br>
简单：倍数最小严谨：指一个或多个数中，a1 ～ an ，k 都是他们任何一个的倍数，k 是公倍数，k 最小时即为最小公倍数。</p>
<h2 id="两个数的最小公倍数">两个数的最小公倍数</h2>
<p>乘积 = 最小公倍数 * 最大公因数所以 最小公倍数 = 乘积 / 最大公因数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">lcm</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> (a * b) / <span class="title function_">gcd</span>(a,b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多个数的最小公倍数">多个数的最小公倍数</h2>
<p>原理跟多个数的最大公因数相同。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">lcmMoreNumber</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">	<span class="keyword">if</span> (arr.<span class="property">length</span> &lt; <span class="number">1</span>) <span class="keyword">return</span> </span><br><span class="line">	<span class="keyword">while</span> (arr.<span class="property">length</span> &gt; <span class="number">1</span>) arr.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">2</span>,<span class="title function_">lcm</span>(arr[<span class="number">0</span>], arr[<span class="number">1</span>]))</span><br><span class="line">	<span class="keyword">return</span> arr[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ol>
<li>【js计算多个数的最大公约数和最小公倍数】：<a href="https://www.cnblogs.com/Ingots/p/11330355.html">https://www.cnblogs.com/Ingots/p/11330355.html</a></li>
<li>【前端JS算法之最大公因数】：<a href="https://blog.csdn.net/weixin_44388087/article/details/110388252">https://blog.csdn.net/weixin_44388087/article/details/110388252</a></li>
<li>【百度百科：更相减损术】：<a href="https://baike.baidu.com/item/%E6%9B%B4%E7%9B%B8%E5%87%8F%E6%8D%9F%E6%9C%AF/449183">https://baike.baidu.com/item/%E6%9B%B4%E7%9B%B8%E5%87%8F%E6%8D%9F%E6%9C%AF/449183</a></li>
<li>【百度百科：欧几里得算法】：<a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/1647675">https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/1647675</a></li>
<li>【百度百科：最小公倍数】：<a href="https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/6192375">https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/6192375</a></li>
</ol>
<p><strong>首发地址：<a href="https://wu-kave.github.io/2022/gcd-lcm-one-and-more-js.html">https://WU-Kave.github.io/2022/gcd-lcm-one-and-more-js.html</a></strong></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>gcd</tag>
        <tag>lcm</tag>
      </tags>
  </entry>
  <entry>
    <title>结构体指针函数--头节点不头大</title>
    <url>/2020/StructKeyFunctionOfHead.html</url>
    <content><![CDATA[<p>近日学习数据结构的时候发现一些以前没有察觉到的点，就是结构体的指针，当修改到头节点的时候，为什么要用二级指针呢？</p>
<span id="more"></span>
<p>A：<em>二级指针才可以修改一级指针本身的值，而不是修改一级指针指向的变量的值</em></p>
<h2 id="详解">详解</h2>
<p>观察如下代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> num,source;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">a</span>=</span>&#123;<span class="number">1</span>,<span class="number">90</span>&#125;,b=&#123;<span class="number">2</span>,<span class="number">86</span>&#125;,c=&#123;<span class="number">3</span>,<span class="number">20</span>&#125;,d=&#123;<span class="number">8</span>,<span class="number">80</span>&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">head</span>,*<span class="title">p</span>;</span></span><br><span class="line">	head=&amp;a;a.next=&amp;b;b.next=&amp;c;c.next=<span class="literal">NULL</span>;d.next=&amp;b;</span><br><span class="line">	<span class="type">void</span> <span class="title function_">change1</span><span class="params">(<span class="keyword">struct</span> student *head)</span>;</span><br><span class="line">	<span class="type">void</span> <span class="title function_">change2</span><span class="params">(<span class="keyword">struct</span> student **head)</span>;</span><br><span class="line">	<span class="type">void</span> <span class="title function_">change3</span><span class="params">(<span class="keyword">struct</span> student *head)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;使用函数前数据：\n&quot;</span>);</span><br><span class="line">	p=head;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-5d%-5d\n&quot;</span>,p-&gt;num,p-&gt;source);</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	change1(head);                       <span class="comment">// 取head变量的值，即head指向的节点的地址 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n使用函数1后：\n&quot;</span>);</span><br><span class="line">	p=head;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-5d%-5d\n&quot;</span>,p-&gt;num,p-&gt;source);</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	change2(&amp;head);                     <span class="comment">//取head变量本身的地址 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n使用函数2后：\n&quot;</span>);</span><br><span class="line">	p=head;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-5d%-5d\n&quot;</span>,p-&gt;num,p-&gt;source);</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	head=&amp;a;a.next=&amp;b;b.next=&amp;c;c.next=<span class="literal">NULL</span>;d.next=&amp;b;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;恢复数据数据：\n&quot;</span>);</span><br><span class="line">	p=head;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-5d%-5d\n&quot;</span>,p-&gt;num,p-&gt;source);</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	change3(head);                       <span class="comment">// 取head变量的值，即head指向的节点的地址 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n使用函数3后：\n&quot;</span>);</span><br><span class="line">	p=head;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-5d%-5d\n&quot;</span>,p-&gt;num,p-&gt;source);</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">change1</span><span class="params">(<span class="keyword">struct</span> student *head)</span>&#123; head=&amp;d; &#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">change2</span><span class="params">(<span class="keyword">struct</span> student **head)</span>&#123; (*head)=&amp;d; &#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">change3</span><span class="params">(<span class="keyword">struct</span> student *head)</span>&#123; *head=d; &#125; </span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用函数前数据：</span><br><span class="line">1    90</span><br><span class="line">2    86</span><br><span class="line">3    20</span><br><span class="line"></span><br><span class="line">使用函数1后：</span><br><span class="line">1    90</span><br><span class="line">2    86</span><br><span class="line">3    20</span><br><span class="line"></span><br><span class="line">使用函数2后：</span><br><span class="line">8    80</span><br><span class="line">2    86</span><br><span class="line">3    20</span><br><span class="line">恢复数据数据：</span><br><span class="line">1    90</span><br><span class="line">2    86</span><br><span class="line">3    20</span><br><span class="line"></span><br><span class="line">使用函数3后：</span><br><span class="line">8    80</span><br><span class="line">2    86</span><br><span class="line">3    20</span><br></pre></td></tr></table></figure>
<p>数据结构：<br>
<img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC//2020/06/10StructKeyFunctionOfHeaddata.png" alt=""></p>
<p><strong>change1函数</strong></p>
<p>参数：struct student *head</p>
<p><code>change1(head)</code>  取主函数中head变量存储的值，即head指向的节点的地址(a的地址)；所以change1函数中的head接收了a的值(注意：主函数的head与change1函数的head不是同一个)，此时新旧head指向的变量相同，但自身不同。</p>
<p><code>head=&amp;d</code>  将change1函数中的head存储的地址改成d的地址，在change1函数中head指向d，因为没有怼主函数的head进行改动，所以主函数的head还是指向a，所以修改不成功</p>
<p><strong>change2函数</strong></p>
<p>参数：struct student **head</p>
<p><em>change2(&amp;head)</em>  取主函数中head变量自身的值传给change2函数中的head变量，而<code>*</code>的作用是进入指针指向的变量，所以<code>*head</code>即进入了change2函数head指向的变量–&gt;主函数的head，所以此时<code>*head</code>等价于主函数的head，修改<code>*head</code>就可以修改主函数的head</p>
<p><code>(*head)=&amp;d</code>  将<code>*head</code>改为d的地址等于将主函数的head改为d的地址</p>
<p><strong>change3函数</strong></p>
<p>参数：struct student *head</p>
<p><code>change3(head)</code>  取主函数中head变量存储的值，即head指向的节点的地址(a的地址)</p>
<p><code>*head=d</code>  <code>*head</code>进入head指向的节点，即进入a，将d赋给<code>*head</code>等价于将d赋给a，此时原来存储a的空间存储的数据与存储d的空间存储的数据一样(有、绕，就是现在没有a，有两个d，因为a变成d)，此时主函数的head、change3函数的head都不变，而是将他们指向的变量重新赋值。<em>此语句会改变数据使得数据丢失，最好不要用</em></p>
]]></content>
  </entry>
  <entry>
    <title>蓝桥杯｜2021第十二届蓝桥杯第二次模拟赛真题与解答[Java]</title>
    <url>/2021/lanqiao2021SimulationJava.html</url>
    <content><![CDATA[<p>记录2021年第十二届蓝桥杯第二次模拟赛真题与解题，部分答案来自网络。个人记录。</p>
<span id="more"></span>
<h1>填空题</h1>
<h2 id="一">一</h2>
<blockquote>
<p><strong>问题描述</strong><br>
　　请问在 1 到 2020 中，有多少个数既是 4 的整数倍，又是 6 的整数倍。</p>
<p><strong>答案提交</strong><br>
这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。**</p>
</blockquote>
<p><strong>解题思路：</strong></p>
<blockquote>
<p>循环判断语句是否正确：i%4 &amp;&amp; i%6</p>
</blockquote>
<p><strong>答案：168</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">answer</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">2020</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; i%<span class="number">6</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(i+<span class="string">&quot;、&quot;</span>);</span><br><span class="line">                answer++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/01/lanqiaoMNT01.png" alt="lanqiaoMNT01"></p>
<h2 id="二">二</h2>
<blockquote>
<p><strong>问题描述</strong><br>
小明要用二进制来表示 1 到 10000 的所有整数，要求不同的整数用不同的二进制数表示，请问，为了表示 1 到 10000 的所有整数，至少需要多少个二进制位？</p>
<p><strong>答案提交</strong><br>
这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
</blockquote>
<p><strong>解题思路：</strong></p>
<blockquote>
<p>把 10000 转换成二进制，直接数  <a href="https://tool.oschina.net/hexconvert/">在线进制转换</a></p>
<p>10000的二进制：10011100010000</p>
<p>共14位</p>
</blockquote>
<p><strong>答案：14</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Integer.toBinaryString(<span class="number">10000</span>);</span><br><span class="line">        <span class="type">char</span>[] charArrays = str.toCharArray();</span><br><span class="line">        System.out.println(charArrays.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/01/lanqiaoMNT02.png" alt="lanqiaoMNT02"></p>
<h2 id="三">三</h2>
<blockquote>
<p><strong>问题描述</strong><br>
请问有多少个序列满足下面的条件：<br>
1.序列的长度为 5。<br>
2.序列中的每个数都是 1 到 10 之间的整数。<br>
3.序列中后面的数大于等于前面的数。<br>
<strong>答案提交</strong><br>
这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
</blockquote>
<p><strong>解题思路：</strong></p>
<blockquote>
<p>5个for循环，统计循环</p>
<p><strong>注意</strong>：根据条件三可知，下一个循环的起始数字是上一个循环当前数字</p>
</blockquote>
<p><strong>答案：2002</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>; a &lt;= <span class="number">10</span>; a++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a; b &lt;= <span class="number">10</span>; b++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> b; c &lt;= <span class="number">10</span>; c++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> c; d &lt;= <span class="number">10</span>; d++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> d; e &lt;= <span class="number">10</span>; e++) &#123;</span><br><span class="line">                            System.out.println(a+<span class="string">&quot;,&quot;</span>+b+<span class="string">&quot;,&quot;</span>+c+<span class="string">&quot;,&quot;</span>+d+<span class="string">&quot;,&quot;</span>+e);</span><br><span class="line">                            count++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;共有：&quot;</span>+count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/WU-Kave/TC@master/2021/01/lanqiaoMNT03.png" alt="lanqiaoMNT03"></p>
<h2 id="四">四</h2>
<blockquote>
<p><strong>问题描述</strong><br>
一个无向图包含 2020 条边，如果图中没有自环和重边，请问最少包含多少个结点？<br>
<strong>答案提交</strong><br>
这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
</blockquote>
<p><strong>解题思路：</strong></p>
<blockquote>
<p><strong>法一：</strong></p>
<p>​	由数学知识可知，n个顶点的最大边数位：n*(n-1)/2</p>
<p>​	所以求解 n*(n-1)/2=2020 可得n=64.0624…，向上去成得n=65</p>
<p>​	因为当n=64时小于64.0624…，边数达不到2020条</p>
</blockquote>
<blockquote>
<p><strong>法二：</strong></p>
<p>​	个人认为法一就够了，其他方法请参考 <a href="https://blog.csdn.net/weixin_44949135/article/details/112560390">2021年 第12届 蓝桥杯 第2次模拟赛真题详解及小结【Java版】</a></p>
</blockquote>
<p><strong>答案：65</strong></p>
<h2 id="五">五</h2>
<blockquote>
<p><strong>问题描述</strong><br>
两个字母之间的距离定义为它们在字母表中位置的距离。例如 A 和 C 的距离为 2，L 和 Q 的距离为 5。对于一个字符串，我们称字符串中两两字符之间的距离之和为字符串的内部距离。例如：ZOO 的内部距离为 22，其中 Z 和 O 的距离为 11。请问，LANQIAO 的内部距离是多少？<br>
<strong>答案提交</strong><br>
这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
</blockquote>
<p><strong>解题思路：</strong></p>
<blockquote>
<p>双重循环，计算每个字符与后面字符到内部距离，因为不知道谁大谁小所以要加绝对值</p>
</blockquote>
<p><strong>答案：162</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] chars = <span class="string">&quot;LANQIAO&quot;</span>.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; chars.length; j++) &#123;</span><br><span class="line">                sum+=Math.abs(chars[i]-chars[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>编程题</h1>
<h2 id="六">六</h2>
<blockquote>
<p><strong>问题描述</strong><br>
给定一个平行四边形的底边长度 l 和高度 h，求平行四边形的面积。<br>
<strong>输入格式</strong><br>
输入的第一行包含一个整数 l，表示平行四边形的底边长度。第二行包含一个整数 h，表示平行四边形的高。<br>
<strong>输出格式</strong><br>
输出一个整数，表示平行四边形的面积。（提示：底边长度和高都是整数的平行四边形面积为整数）<br>
<strong>样例输入</strong><br>
2<br>
7<br>
<strong>样例输出</strong><br>
14<br>
<strong>数据规模和约定</strong><br>
对于所有评测用例，1 &lt;= l, h &lt;= 100。</p>
</blockquote>
<p><strong>解题思路：</strong></p>
<blockquote>
<p>平行四边形面积=l*h</p>
</blockquote>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(l*h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="七">七</h2>
<blockquote>
<p><strong>问题描述</strong><br>
现在时间是 a 点 b 分，请问 t 分钟后，是几点几分？<br>
<strong>输入格式</strong><br>
输入的第一行包含一个整数 a。第二行包含一个整数 b。第三行包含一个整数 t。<br>
<strong>输出格式</strong><br>
输出第一行包含一个整数，表示结果是几点。第二行包含一个整数，表示结果是几分。<br>
<strong>样例输入</strong><br>
3<br>
20<br>
165<br>
<strong>样例输出</strong><br>
6<br>
5<br>
<strong>样例输入</strong><br>
3<br>
20<br>
175<br>
<strong>样例输出</strong><br>
6<br>
15<br>
<strong>数据规模和约定</strong><br>
对于所有评测用例，0 &lt;= a &lt;= 23, 0 &lt;= b &lt;= 59, 0 &lt;= t, t 分钟后还是在当天。</p>
</blockquote>
<p><strong>解题思路：</strong></p>
<blockquote>
<p>如果b+t&gt;60则要进位</p>
<p>(b+t)/60=进位</p>
<p>(b+t)%60=余树，分钟数</p>
</blockquote>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">//时</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">//分</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">//经过</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> b+t;</span><br><span class="line">        <span class="keyword">if</span> (c&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">            a+= c/<span class="number">60</span>;</span><br><span class="line">            b=c%<span class="number">60</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="八">八</h2>
<blockquote>
<p><strong>问题描述</strong><br>
小蓝负责花园的灌溉工作。花园可以看成一个 n 行 m 列的方格图形。中间有一部分位置上安装有出水管。小蓝可以控制一个按钮同时打开所有的出水管，打开时，有出水管的位置可以被认为已经灌溉好。　　每经过一分钟，水就会向四面扩展一个方格，被扩展到的方格可以被认为已经灌溉好。即如果前一分钟某一个方格被灌溉好，则下一分钟它上下左右的四个方格也被灌溉好。　　给定花园水管的位置，请问 k 分钟后，有多少个方格被灌溉好？<br>
<strong>输入格式</strong><br>
　　输入的第一行包含两个整数 n, m。　　第二行包含一个整数 t，表示出水管的数量。　　接下来 t 行描述出水管的位置，其中第 i 行包含两个数 r, c 表示第 r 行第 c 列有一个排水管。　　接下来一行包含一个整数 k。<br>
<strong>输出格式</strong><br>
　　输出一个整数，表示答案。<br>
<strong>样例输入</strong><br>
3 6<br>
2<br>
2 2<br>
3 4<br>
1<br>
<strong>样例输出</strong><br>
9<br>
<strong>样例说明</strong><br>
　　用1表示灌溉到，0表示未灌溉到。　　打开水管时：　　000000<br>
　　010000<br>
　　000100<br>
　　1分钟后：　　010000<br>
　　111100<br>
　　011110<br>
　　共有9个方格被灌溉好。<br>
<strong>数据规模和约定</strong><br>
　　对于所有评测用例，1 &lt;= n, m &lt;= 100, 1 &lt;= t &lt;= 10, 1 &lt;= k &lt;= 100。</p>
</blockquote>
<p><strong>解题思路：</strong></p>
<blockquote>
<p>用布尔类型<em>二维数组</em>记录是否被灌溉，灌溉为true，否则为false</p>
<p>二维数组上下左右各扩大范围可以避免每次都要检查是否存在，即<code>new boolean[n+2][m+2]</code>，然后从1开始遍历到n/m</p>
</blockquote>
<blockquote>
<p><strong>法一：</strong>    <em>暴力循环</em></p>
<p>​		1.克隆一个数组，避免修改后影响灌溉扩展准确性。</p>
<p>​		2.当时间大于0时，执行以下循环体，每次时间-1：</p>
<p>​			A.如果点在区域内，则让对应点状态改为已灌溉</p>
<p>​		3.将克隆数组复制给原数组，更新其值。</p>
<p>​		4.二重循环统计</p>
</blockquote>
<blockquote>
<p><strong>法二：</strong>  <em>队列</em></p>
<p>​		1.二重循环记录初始水管，让水管进队列</p>
<p>​		2.当时间大于0时，执行以下循环体，每次时间-1：​				A .循环队列，弹出一个节点，获得此节点坐标​				B.让此节点向四个方向扩展​						a.获得要扩展的坐标​						b.若坐标在区域内，则让对应点状态改为已灌溉且让该点进队列以应付下一次扩展</p>
<p>​		3.二重循环统计</p>
<p>注意：</p>
<p>​		1.Node类用来储存节点坐标​		2.获得要扩展的坐标时候采用预设的修改值组中的一个计算坐标​		3.队列存储每次回向外扩展的格子，因为题意只需要统计多少个已被灌溉，不需要再次扩展，即出队列即可</p>
</blockquote>
<p><strong>代码：</strong> <em>此代码展示两种方法，非正式提交代码</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();  <span class="comment">//n行</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();  <span class="comment">//m列</span></span><br><span class="line">        <span class="type">boolean</span>[][] irrigation = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][m]; <span class="comment">//表示是否灌溉</span></span><br><span class="line">        <span class="type">boolean</span>[][] irrigation2 = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][m]; <span class="comment">//表示是否灌溉</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> sc.nextInt();  <span class="comment">//水管的数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t; i++) &#123;  <span class="comment">//录入水管</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            irrigation[r-<span class="number">1</span>][c-<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">            irrigation2[r-<span class="number">1</span>][c-<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt();  <span class="comment">//时间</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res1</span> <span class="operator">=</span>watering1(irrigation, k, n, m);</span><br><span class="line">        System.out.println(<span class="string">&quot;暴力法：&quot;</span>+res1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res2</span> <span class="operator">=</span> watering2(irrigation2, k, t, n, m);</span><br><span class="line">        System.out.println(<span class="string">&quot;队列法：&quot;</span>+res2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二维数组上下左右各扩大范围可以避免每次都要检查是否存在，即new boolean[n+2][m+2]，然后从1开始遍历</span></span><br><span class="line">    <span class="comment">//浇水并返回已灌溉方格数</span></span><br><span class="line">    <span class="comment">//法一：暴力循环所有</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">watering1</span><span class="params">(<span class="type">boolean</span>[][] irrigation, <span class="type">int</span> time, <span class="type">int</span> row, <span class="type">int</span> col)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">//统计</span></span><br><span class="line">        <span class="type">boolean</span>[][] clone = <span class="keyword">new</span> <span class="title class_">boolean</span>[row][col];  <span class="comment">//复制原数组，避免修改后影响灌溉</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            clone[i]=irrigation[i].clone();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(time--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(irrigation[i][j])&#123;</span><br><span class="line">                        <span class="comment">//上下左右</span></span><br><span class="line">                        <span class="keyword">if</span> (isArea(row,col,i-<span class="number">1</span>,j)) clone[i-<span class="number">1</span>][j]=<span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">if</span> (isArea(row,col,i+<span class="number">1</span>,j)) clone[i+<span class="number">1</span>][j]=<span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">if</span> (isArea(row,col,i,j-<span class="number">1</span>)) clone[i][j-<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">if</span> (isArea(row,col,i,j+<span class="number">1</span>)) clone[i][j+<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更新原数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">                irrigation[i]=clone[i].clone();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//统计</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (irrigation[i][j])  count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法二：用队列存储每次会向外灌溉的格子</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">watering2</span><span class="params">(<span class="type">boolean</span>[][] irrigation, <span class="type">int</span> time, <span class="type">int</span> t, <span class="type">int</span> row, <span class="type">int</span> col)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">//统计</span></span><br><span class="line">        <span class="type">int</span>[][] direction=&#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;  <span class="comment">//灌溉方向，每次取一个</span></span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="comment">//水管进队列</span></span><br><span class="line">                <span class="keyword">if</span> (irrigation[i][j]) queue.offer(<span class="keyword">new</span> <span class="title class_">Node</span>(i,j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(time--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="comment">//获得即将向外扩展的格子坐标</span></span><br><span class="line">                <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> temp.row;</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> temp.col;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; direction.length; j++) &#123;  <span class="comment">//向不同方向扩展</span></span><br><span class="line">                    <span class="comment">//获得要被扩展的格子坐标</span></span><br><span class="line">                    <span class="type">int</span> n_x=x+direction[j][<span class="number">0</span>];</span><br><span class="line">                    <span class="type">int</span> n_y=y+direction[j][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (isArea(row,col,n_x,n_y))&#123;</span><br><span class="line">                        irrigation[n_x][n_y]=<span class="literal">true</span>;</span><br><span class="line">                        queue.offer(<span class="keyword">new</span> <span class="title class_">Node</span>(n_x,n_y));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//统计</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (irrigation[i][j]) count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断点是否在区域内，xy点位，row行数 col列数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isArea</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>&lt;=x &amp;&amp; x&lt;row &amp;&amp; <span class="number">0</span>&lt;=y &amp;&amp; y&lt;col;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个类用来表示一个点  row/col：行/列坐标</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.row=row;</span><br><span class="line">        <span class="built_in">this</span>.col=col;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="九">九</h2>
<blockquote>
<p><strong>问题描述</strong><br>
小蓝有一张黑白图像，由 n * m 个像素组成，其中从上到下共 n 行，每行从左到右 m 列。每个像素由一个 0 到 255 之间的灰度值表示。现在，小蓝准备对图像进行模糊操作，操作的方法为：对于每个像素，将以它为中心 3 * 3 区域内的所有像素（可能是 9 个像素或少于 9 个像素）求和后除以这个范围内的像素个数（取下整），得到的值就是模糊后的结果。请注意每个像素都要用原图中的灰度值计算求和。<br>
<strong>输入格式</strong><br>
　　输入的第一行包含两个整数 n, m。　　第 2 行到第 n + 1 行每行包含 m 个整数，表示每个像素的灰度值，相邻整数之间用一个空格分隔。<br>
<strong>输出格式</strong><br>
输出 n 行，每行 m 个整数，相邻整数之间用空格分隔，表示模糊后的图像。<br>
<strong>样例输入</strong><br>
3 4<br>
0 0 0 255<br>
0 0 255 0<br>
0 30 255 255<br>
<strong>样例输出</strong><br>
0 42 85 127<br>
5 60 116 170<br>
7 90 132 191<br>
<strong>数据规模和约定</strong><br>
　　对于所有评测用例，1 &lt;= n, m &lt;= 100。</p>
</blockquote>
<p><strong>解题思路：</strong></p>
<blockquote>
<ol>
<li>
<p>二重循环每一个像素点</p>
</li>
<li>
<p>遍历以当前点为中心的3*3大的像素块<br>
a. 获得坐标，若坐标在区域内，取得像素值求和，并记录已统计的像素数，因为坐标有可能不在区域内<br>
b. 将 <code>像素值总和/已统计像素个数</code>复制给新数组，这样不会影响最终计算结果</p>
</li>
</ol>
</blockquote>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[][] grayscale = <span class="keyword">new</span> <span class="title class_">int</span>[n][m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                grayscale[i][j]= sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] newGrayscale = handle(grayscale, n, m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                System.out.print(newGrayscale[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] handle(<span class="type">int</span>[][] grayscale, <span class="type">int</span> row, <span class="type">int</span> col)&#123;</span><br><span class="line">        <span class="type">int</span>[][] newGrayscale = <span class="keyword">new</span> <span class="title class_">int</span>[row][col]; <span class="comment">//大小一样点数组，否则会在计算过程中会污染数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="type">int</span> sum=<span class="number">0</span>;  <span class="comment">//像素和</span></span><br><span class="line">                <span class="type">int</span> count=<span class="number">0</span>; <span class="comment">//像素个数</span></span><br><span class="line">                <span class="comment">//这个循环用来遍历以 (i,j)为中心的3*3的矩形里面的每个像素块</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">9</span>; k++) &#123;</span><br><span class="line">                    <span class="comment">//i-1&amp;j-1让点位移动到左上角</span></span><br><span class="line">                    <span class="comment">// k/3取行 k%3取列</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">n_x</span> <span class="operator">=</span> (i-<span class="number">1</span>)+k/<span class="number">3</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">n_y</span> <span class="operator">=</span> (j-<span class="number">1</span>)+k%<span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">if</span> (isArea(row,col,n_x,n_y))&#123;</span><br><span class="line">                        sum+=grayscale[n_x][n_y];</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                newGrayscale[i][j] = sum/count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newGrayscale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断点是否在区域内，xy点位，row行数 col列数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isArea</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>&lt;=x &amp;&amp; x&lt;row &amp;&amp; <span class="number">0</span>&lt;=y &amp;&amp; y&lt;col;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="十">十</h2>
<p><em><strong>重头戏</strong></em>  不会</p>
<p>裂开，我是笨比</p>
<p><strong>附录</strong></p>
<blockquote>
<p>参考</p>
<p>作者：<a href="https://blog.csdn.net/qq_21879995">风滚草呼呼~</a>  <a href="https://blog.csdn.net/qq_21879995/article/details/112478797">蓝桥杯第十二届校内模拟赛（第二期）个人做题答案 仅供参考</a></p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
</search>
